#loc = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)
module {
  tt.func public @gemv_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : vector<64xi64> loc(#loc1)
    %cst_0 = arith.constant dense<128> : vector<16x64xi64> loc(#loc1)
    %cst_1 = arith.constant dense<[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126]> : vector<64xi64> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : vector<1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : vector<16x64xbf16> loc(#loc1)
    %c0 = arith.constant 0 : index loc(#loc1)
    %cst_4 = arith.constant dense<2> : vector<16x64xi32> loc(#loc1)
    %cst_5 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]> : vector<64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]> : vector<16xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : vector<16xf32> loc(#loc28)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc4)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %2 = vector.splat %1 : vector<16xi32> loc(#loc6)
    %3 = arith.addi %2, %cst_6 : vector<16xi32> loc(#loc6)
    %4 = vector.shape_cast %3 {axis = 1 : i32} : vector<16xi32> to vector<16x1xi32> loc(#loc7)
    %5 = vector.splat %arg5 : vector<16x1xi32> loc(#loc8)
    %6 = arith.muli %4, %5 : vector<16x1xi32> loc(#loc8)
    %7 = vector.shape_cast %cst_5 {axis = 0 : i32} : vector<64xi32> to vector<1x64xi32> loc(#loc9)
    %8 = vector.broadcast %6 : vector<16x1xi32> to vector<16x64xi32> loc(#loc10)
    %9 = vector.broadcast %7 : vector<1x64xi32> to vector<16x64xi32> loc(#loc10)
    %10 = arith.addi %8, %9 : vector<16x64xi32> loc(#loc10)
    %11 = tt.ptr_to_int %arg1 : !tt.ptr<bf16> -> i64 loc(#loc11)
    %12 = vector.splat %11 : vector<16x64xi64> loc(#loc11)
    %13 = arith.muli %10, %cst_4 : vector<16x64xi32> loc(#loc11)
    %14 = arith.extsi %13 : vector<16x64xi32> to vector<16x64xi64> loc(#loc11)
    %15 = arith.addi %12, %14 : vector<16x64xi64> loc(#loc11)
    %16 = tt.ptr_to_int %arg2 : !tt.ptr<bf16> -> i64 loc(#loc12)
    %17 = vector.splat %16 : vector<64xi64> loc(#loc12)
    %18 = arith.addi %17, %cst_1 : vector<64xi64> loc(#loc12)
    %19:3 = scf.for %arg6 = %c0_i32 to %arg4 step %c64_i32 iter_args(%arg7 = %cst_7, %arg8 = %15, %arg9 = %18) -> (vector<16xf32>, vector<16x64xi64>, vector<64xi64>)  : i32 {
      %23 = vector.extract %arg8[0, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %24 = tt.int_to_ptr %23 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %25 = triton_cpu.ptr_to_memref %24 : <bf16> -> memref<64xbf16> loc(#loc14)
      %26 = vector.load %25[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %27 = vector.insert %26, %cst_3 [0] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %28 = vector.extract %arg8[1, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %29 = tt.int_to_ptr %28 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %30 = triton_cpu.ptr_to_memref %29 : <bf16> -> memref<64xbf16> loc(#loc14)
      %31 = vector.load %30[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %32 = vector.insert %31, %27 [1] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %33 = vector.extract %arg8[2, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %34 = tt.int_to_ptr %33 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %35 = triton_cpu.ptr_to_memref %34 : <bf16> -> memref<64xbf16> loc(#loc14)
      %36 = vector.load %35[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %37 = vector.insert %36, %32 [2] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %38 = vector.extract %arg8[3, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %39 = tt.int_to_ptr %38 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %40 = triton_cpu.ptr_to_memref %39 : <bf16> -> memref<64xbf16> loc(#loc14)
      %41 = vector.load %40[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %42 = vector.insert %41, %37 [3] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %43 = vector.extract %arg8[4, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %44 = tt.int_to_ptr %43 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %45 = triton_cpu.ptr_to_memref %44 : <bf16> -> memref<64xbf16> loc(#loc14)
      %46 = vector.load %45[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %47 = vector.insert %46, %42 [4] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %48 = vector.extract %arg8[5, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %49 = tt.int_to_ptr %48 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %50 = triton_cpu.ptr_to_memref %49 : <bf16> -> memref<64xbf16> loc(#loc14)
      %51 = vector.load %50[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %52 = vector.insert %51, %47 [5] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %53 = vector.extract %arg8[6, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %54 = tt.int_to_ptr %53 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %55 = triton_cpu.ptr_to_memref %54 : <bf16> -> memref<64xbf16> loc(#loc14)
      %56 = vector.load %55[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %57 = vector.insert %56, %52 [6] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %58 = vector.extract %arg8[7, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %59 = tt.int_to_ptr %58 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %60 = triton_cpu.ptr_to_memref %59 : <bf16> -> memref<64xbf16> loc(#loc14)
      %61 = vector.load %60[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %62 = vector.insert %61, %57 [7] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %63 = vector.extract %arg8[8, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %64 = tt.int_to_ptr %63 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %65 = triton_cpu.ptr_to_memref %64 : <bf16> -> memref<64xbf16> loc(#loc14)
      %66 = vector.load %65[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %67 = vector.insert %66, %62 [8] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %68 = vector.extract %arg8[9, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %69 = tt.int_to_ptr %68 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %70 = triton_cpu.ptr_to_memref %69 : <bf16> -> memref<64xbf16> loc(#loc14)
      %71 = vector.load %70[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %72 = vector.insert %71, %67 [9] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %73 = vector.extract %arg8[10, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %74 = tt.int_to_ptr %73 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %75 = triton_cpu.ptr_to_memref %74 : <bf16> -> memref<64xbf16> loc(#loc14)
      %76 = vector.load %75[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %77 = vector.insert %76, %72 [10] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %78 = vector.extract %arg8[11, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %79 = tt.int_to_ptr %78 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %80 = triton_cpu.ptr_to_memref %79 : <bf16> -> memref<64xbf16> loc(#loc14)
      %81 = vector.load %80[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %82 = vector.insert %81, %77 [11] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %83 = vector.extract %arg8[12, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %84 = tt.int_to_ptr %83 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %85 = triton_cpu.ptr_to_memref %84 : <bf16> -> memref<64xbf16> loc(#loc14)
      %86 = vector.load %85[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %87 = vector.insert %86, %82 [12] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %88 = vector.extract %arg8[13, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %89 = tt.int_to_ptr %88 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %90 = triton_cpu.ptr_to_memref %89 : <bf16> -> memref<64xbf16> loc(#loc14)
      %91 = vector.load %90[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %92 = vector.insert %91, %87 [13] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %93 = vector.extract %arg8[14, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %94 = tt.int_to_ptr %93 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %95 = triton_cpu.ptr_to_memref %94 : <bf16> -> memref<64xbf16> loc(#loc14)
      %96 = vector.load %95[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %97 = vector.insert %96, %92 [14] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %98 = vector.extract %arg8[15, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %99 = tt.int_to_ptr %98 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %100 = triton_cpu.ptr_to_memref %99 : <bf16> -> memref<64xbf16> loc(#loc14)
      %101 = vector.load %100[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %102 = vector.insert %101, %97 [15] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %103 = vector.extract %arg9[0] : i64 from vector<64xi64> loc(#loc15)
      %104 = tt.int_to_ptr %103 : i64 -> !tt.ptr<bf16> loc(#loc15)
      %105 = triton_cpu.ptr_to_memref %104 : <bf16> -> memref<64xbf16> loc(#loc15)
      %106 = vector.load %105[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc15)
      %107 = vector.shape_cast %106 {axis = 0 : i32} : vector<64xbf16> to vector<1x64xbf16> loc(#loc16)
      %108 = vector.broadcast %107 : vector<1x64xbf16> to vector<16x64xbf16> loc(#loc17)
      %109 = arith.mulf %102, %108 : vector<16x64xbf16> loc(#loc17)
      %110 = arith.extf %109 : vector<16x64xbf16> to vector<16x64xf32> loc(#loc29)
      %111 = vector.extract %110[0] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %112 = vector.shuffle %111, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %113 = arith.addf %111, %112 : vector<64xf32> loc(#loc31)
      %114 = vector.shuffle %113, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %115 = arith.addf %113, %114 : vector<64xf32> loc(#loc31)
      %116 = vector.shuffle %115, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %117 = arith.addf %115, %116 : vector<64xf32> loc(#loc31)
      %118 = vector.shuffle %117, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %119 = arith.addf %117, %118 : vector<64xf32> loc(#loc31)
      %120 = vector.shuffle %119, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %121 = arith.addf %119, %120 : vector<64xf32> loc(#loc31)
      %122 = vector.shuffle %121, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %123 = arith.addf %121, %122 : vector<64xf32> loc(#loc31)
      %124 = vector.extractelement %123[%c0 : index] : vector<64xf32> loc(#loc28)
      %125 = vector.insert %124, %cst_7 [0] : f32 into vector<16xf32> loc(#loc28)
      %126 = vector.extract %110[1] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %127 = vector.shuffle %126, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %128 = arith.addf %126, %127 : vector<64xf32> loc(#loc31)
      %129 = vector.shuffle %128, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %130 = arith.addf %128, %129 : vector<64xf32> loc(#loc31)
      %131 = vector.shuffle %130, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %132 = arith.addf %130, %131 : vector<64xf32> loc(#loc31)
      %133 = vector.shuffle %132, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %134 = arith.addf %132, %133 : vector<64xf32> loc(#loc31)
      %135 = vector.shuffle %134, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %136 = arith.addf %134, %135 : vector<64xf32> loc(#loc31)
      %137 = vector.shuffle %136, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %138 = arith.addf %136, %137 : vector<64xf32> loc(#loc31)
      %139 = vector.extractelement %138[%c0 : index] : vector<64xf32> loc(#loc28)
      %140 = vector.insert %139, %125 [1] : f32 into vector<16xf32> loc(#loc28)
      %141 = vector.extract %110[2] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %142 = vector.shuffle %141, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %143 = arith.addf %141, %142 : vector<64xf32> loc(#loc31)
      %144 = vector.shuffle %143, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %145 = arith.addf %143, %144 : vector<64xf32> loc(#loc31)
      %146 = vector.shuffle %145, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %147 = arith.addf %145, %146 : vector<64xf32> loc(#loc31)
      %148 = vector.shuffle %147, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %149 = arith.addf %147, %148 : vector<64xf32> loc(#loc31)
      %150 = vector.shuffle %149, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %151 = arith.addf %149, %150 : vector<64xf32> loc(#loc31)
      %152 = vector.shuffle %151, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %153 = arith.addf %151, %152 : vector<64xf32> loc(#loc31)
      %154 = vector.extractelement %153[%c0 : index] : vector<64xf32> loc(#loc28)
      %155 = vector.insert %154, %140 [2] : f32 into vector<16xf32> loc(#loc28)
      %156 = vector.extract %110[3] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %157 = vector.shuffle %156, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %158 = arith.addf %156, %157 : vector<64xf32> loc(#loc31)
      %159 = vector.shuffle %158, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %160 = arith.addf %158, %159 : vector<64xf32> loc(#loc31)
      %161 = vector.shuffle %160, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %162 = arith.addf %160, %161 : vector<64xf32> loc(#loc31)
      %163 = vector.shuffle %162, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %164 = arith.addf %162, %163 : vector<64xf32> loc(#loc31)
      %165 = vector.shuffle %164, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %166 = arith.addf %164, %165 : vector<64xf32> loc(#loc31)
      %167 = vector.shuffle %166, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %168 = arith.addf %166, %167 : vector<64xf32> loc(#loc31)
      %169 = vector.extractelement %168[%c0 : index] : vector<64xf32> loc(#loc28)
      %170 = vector.insert %169, %155 [3] : f32 into vector<16xf32> loc(#loc28)
      %171 = vector.extract %110[4] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %172 = vector.shuffle %171, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %173 = arith.addf %171, %172 : vector<64xf32> loc(#loc31)
      %174 = vector.shuffle %173, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %175 = arith.addf %173, %174 : vector<64xf32> loc(#loc31)
      %176 = vector.shuffle %175, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %177 = arith.addf %175, %176 : vector<64xf32> loc(#loc31)
      %178 = vector.shuffle %177, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %179 = arith.addf %177, %178 : vector<64xf32> loc(#loc31)
      %180 = vector.shuffle %179, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %181 = arith.addf %179, %180 : vector<64xf32> loc(#loc31)
      %182 = vector.shuffle %181, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %183 = arith.addf %181, %182 : vector<64xf32> loc(#loc31)
      %184 = vector.extractelement %183[%c0 : index] : vector<64xf32> loc(#loc28)
      %185 = vector.insert %184, %170 [4] : f32 into vector<16xf32> loc(#loc28)
      %186 = vector.extract %110[5] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %187 = vector.shuffle %186, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %188 = arith.addf %186, %187 : vector<64xf32> loc(#loc31)
      %189 = vector.shuffle %188, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %190 = arith.addf %188, %189 : vector<64xf32> loc(#loc31)
      %191 = vector.shuffle %190, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %192 = arith.addf %190, %191 : vector<64xf32> loc(#loc31)
      %193 = vector.shuffle %192, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %194 = arith.addf %192, %193 : vector<64xf32> loc(#loc31)
      %195 = vector.shuffle %194, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %196 = arith.addf %194, %195 : vector<64xf32> loc(#loc31)
      %197 = vector.shuffle %196, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %198 = arith.addf %196, %197 : vector<64xf32> loc(#loc31)
      %199 = vector.extractelement %198[%c0 : index] : vector<64xf32> loc(#loc28)
      %200 = vector.insert %199, %185 [5] : f32 into vector<16xf32> loc(#loc28)
      %201 = vector.extract %110[6] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %202 = vector.shuffle %201, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %203 = arith.addf %201, %202 : vector<64xf32> loc(#loc31)
      %204 = vector.shuffle %203, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %205 = arith.addf %203, %204 : vector<64xf32> loc(#loc31)
      %206 = vector.shuffle %205, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %207 = arith.addf %205, %206 : vector<64xf32> loc(#loc31)
      %208 = vector.shuffle %207, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %209 = arith.addf %207, %208 : vector<64xf32> loc(#loc31)
      %210 = vector.shuffle %209, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %211 = arith.addf %209, %210 : vector<64xf32> loc(#loc31)
      %212 = vector.shuffle %211, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %213 = arith.addf %211, %212 : vector<64xf32> loc(#loc31)
      %214 = vector.extractelement %213[%c0 : index] : vector<64xf32> loc(#loc28)
      %215 = vector.insert %214, %200 [6] : f32 into vector<16xf32> loc(#loc28)
      %216 = vector.extract %110[7] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %217 = vector.shuffle %216, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %218 = arith.addf %216, %217 : vector<64xf32> loc(#loc31)
      %219 = vector.shuffle %218, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %220 = arith.addf %218, %219 : vector<64xf32> loc(#loc31)
      %221 = vector.shuffle %220, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %222 = arith.addf %220, %221 : vector<64xf32> loc(#loc31)
      %223 = vector.shuffle %222, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %224 = arith.addf %222, %223 : vector<64xf32> loc(#loc31)
      %225 = vector.shuffle %224, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %226 = arith.addf %224, %225 : vector<64xf32> loc(#loc31)
      %227 = vector.shuffle %226, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %228 = arith.addf %226, %227 : vector<64xf32> loc(#loc31)
      %229 = vector.extractelement %228[%c0 : index] : vector<64xf32> loc(#loc28)
      %230 = vector.insert %229, %215 [7] : f32 into vector<16xf32> loc(#loc28)
      %231 = vector.extract %110[8] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %232 = vector.shuffle %231, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %233 = arith.addf %231, %232 : vector<64xf32> loc(#loc31)
      %234 = vector.shuffle %233, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %235 = arith.addf %233, %234 : vector<64xf32> loc(#loc31)
      %236 = vector.shuffle %235, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %237 = arith.addf %235, %236 : vector<64xf32> loc(#loc31)
      %238 = vector.shuffle %237, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %239 = arith.addf %237, %238 : vector<64xf32> loc(#loc31)
      %240 = vector.shuffle %239, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %241 = arith.addf %239, %240 : vector<64xf32> loc(#loc31)
      %242 = vector.shuffle %241, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %243 = arith.addf %241, %242 : vector<64xf32> loc(#loc31)
      %244 = vector.extractelement %243[%c0 : index] : vector<64xf32> loc(#loc28)
      %245 = vector.insert %244, %230 [8] : f32 into vector<16xf32> loc(#loc28)
      %246 = vector.extract %110[9] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %247 = vector.shuffle %246, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %248 = arith.addf %246, %247 : vector<64xf32> loc(#loc31)
      %249 = vector.shuffle %248, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %250 = arith.addf %248, %249 : vector<64xf32> loc(#loc31)
      %251 = vector.shuffle %250, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %252 = arith.addf %250, %251 : vector<64xf32> loc(#loc31)
      %253 = vector.shuffle %252, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %254 = arith.addf %252, %253 : vector<64xf32> loc(#loc31)
      %255 = vector.shuffle %254, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %256 = arith.addf %254, %255 : vector<64xf32> loc(#loc31)
      %257 = vector.shuffle %256, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %258 = arith.addf %256, %257 : vector<64xf32> loc(#loc31)
      %259 = vector.extractelement %258[%c0 : index] : vector<64xf32> loc(#loc28)
      %260 = vector.insert %259, %245 [9] : f32 into vector<16xf32> loc(#loc28)
      %261 = vector.extract %110[10] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %262 = vector.shuffle %261, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %263 = arith.addf %261, %262 : vector<64xf32> loc(#loc31)
      %264 = vector.shuffle %263, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %265 = arith.addf %263, %264 : vector<64xf32> loc(#loc31)
      %266 = vector.shuffle %265, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %267 = arith.addf %265, %266 : vector<64xf32> loc(#loc31)
      %268 = vector.shuffle %267, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %269 = arith.addf %267, %268 : vector<64xf32> loc(#loc31)
      %270 = vector.shuffle %269, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %271 = arith.addf %269, %270 : vector<64xf32> loc(#loc31)
      %272 = vector.shuffle %271, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %273 = arith.addf %271, %272 : vector<64xf32> loc(#loc31)
      %274 = vector.extractelement %273[%c0 : index] : vector<64xf32> loc(#loc28)
      %275 = vector.insert %274, %260 [10] : f32 into vector<16xf32> loc(#loc28)
      %276 = vector.extract %110[11] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %277 = vector.shuffle %276, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %278 = arith.addf %276, %277 : vector<64xf32> loc(#loc31)
      %279 = vector.shuffle %278, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %280 = arith.addf %278, %279 : vector<64xf32> loc(#loc31)
      %281 = vector.shuffle %280, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %282 = arith.addf %280, %281 : vector<64xf32> loc(#loc31)
      %283 = vector.shuffle %282, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %284 = arith.addf %282, %283 : vector<64xf32> loc(#loc31)
      %285 = vector.shuffle %284, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %286 = arith.addf %284, %285 : vector<64xf32> loc(#loc31)
      %287 = vector.shuffle %286, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %288 = arith.addf %286, %287 : vector<64xf32> loc(#loc31)
      %289 = vector.extractelement %288[%c0 : index] : vector<64xf32> loc(#loc28)
      %290 = vector.insert %289, %275 [11] : f32 into vector<16xf32> loc(#loc28)
      %291 = vector.extract %110[12] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %292 = vector.shuffle %291, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %293 = arith.addf %291, %292 : vector<64xf32> loc(#loc31)
      %294 = vector.shuffle %293, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %295 = arith.addf %293, %294 : vector<64xf32> loc(#loc31)
      %296 = vector.shuffle %295, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %297 = arith.addf %295, %296 : vector<64xf32> loc(#loc31)
      %298 = vector.shuffle %297, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %299 = arith.addf %297, %298 : vector<64xf32> loc(#loc31)
      %300 = vector.shuffle %299, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %301 = arith.addf %299, %300 : vector<64xf32> loc(#loc31)
      %302 = vector.shuffle %301, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %303 = arith.addf %301, %302 : vector<64xf32> loc(#loc31)
      %304 = vector.extractelement %303[%c0 : index] : vector<64xf32> loc(#loc28)
      %305 = vector.insert %304, %290 [12] : f32 into vector<16xf32> loc(#loc28)
      %306 = vector.extract %110[13] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %307 = vector.shuffle %306, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %308 = arith.addf %306, %307 : vector<64xf32> loc(#loc31)
      %309 = vector.shuffle %308, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %310 = arith.addf %308, %309 : vector<64xf32> loc(#loc31)
      %311 = vector.shuffle %310, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %312 = arith.addf %310, %311 : vector<64xf32> loc(#loc31)
      %313 = vector.shuffle %312, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %314 = arith.addf %312, %313 : vector<64xf32> loc(#loc31)
      %315 = vector.shuffle %314, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %316 = arith.addf %314, %315 : vector<64xf32> loc(#loc31)
      %317 = vector.shuffle %316, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %318 = arith.addf %316, %317 : vector<64xf32> loc(#loc31)
      %319 = vector.extractelement %318[%c0 : index] : vector<64xf32> loc(#loc28)
      %320 = vector.insert %319, %305 [13] : f32 into vector<16xf32> loc(#loc28)
      %321 = vector.extract %110[14] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %322 = vector.shuffle %321, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %323 = arith.addf %321, %322 : vector<64xf32> loc(#loc31)
      %324 = vector.shuffle %323, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %325 = arith.addf %323, %324 : vector<64xf32> loc(#loc31)
      %326 = vector.shuffle %325, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %327 = arith.addf %325, %326 : vector<64xf32> loc(#loc31)
      %328 = vector.shuffle %327, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %329 = arith.addf %327, %328 : vector<64xf32> loc(#loc31)
      %330 = vector.shuffle %329, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %331 = arith.addf %329, %330 : vector<64xf32> loc(#loc31)
      %332 = vector.shuffle %331, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %333 = arith.addf %331, %332 : vector<64xf32> loc(#loc31)
      %334 = vector.extractelement %333[%c0 : index] : vector<64xf32> loc(#loc28)
      %335 = vector.insert %334, %320 [14] : f32 into vector<16xf32> loc(#loc28)
      %336 = vector.extract %110[15] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %337 = vector.shuffle %336, %cst_2 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %338 = arith.addf %336, %337 : vector<64xf32> loc(#loc31)
      %339 = vector.shuffle %338, %cst_2 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %340 = arith.addf %338, %339 : vector<64xf32> loc(#loc31)
      %341 = vector.shuffle %340, %cst_2 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %342 = arith.addf %340, %341 : vector<64xf32> loc(#loc31)
      %343 = vector.shuffle %342, %cst_2 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %344 = arith.addf %342, %343 : vector<64xf32> loc(#loc31)
      %345 = vector.shuffle %344, %cst_2 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %346 = arith.addf %344, %345 : vector<64xf32> loc(#loc31)
      %347 = vector.shuffle %346, %cst_2 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %348 = arith.addf %346, %347 : vector<64xf32> loc(#loc31)
      %349 = vector.extractelement %348[%c0 : index] : vector<64xf32> loc(#loc28)
      %350 = vector.insert %349, %335 [15] : f32 into vector<16xf32> loc(#loc28)
      %351 = arith.addf %arg7, %350 : vector<16xf32> loc(#loc20)
      %352 = arith.addi %arg8, %cst_0 : vector<16x64xi64> loc(#loc21)
      %353 = arith.addi %arg9, %cst : vector<64xi64> loc(#loc22)
      scf.yield %351, %352, %353 : vector<16xf32>, vector<16x64xi64>, vector<64xi64> loc(#loc23)
    } loc(#loc13)
    %20 = arith.truncf %19#0 : vector<16xf32> to vector<16xbf16> loc(#loc24)
    %21 = tt.addptr %arg0, %1 : !tt.ptr<bf16>, i32 loc(#loc25)
    %22 = triton_cpu.ptr_to_memref %21 : <bf16> -> memref<16xbf16> loc(#loc26)
    vector.store %20, %22[%c0] : memref<16xbf16>, vector<16xbf16> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":267:36)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:22)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":29:28)
#loc5 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:19)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:34)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:16)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:27)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:42)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:39)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:13)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":34:12)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":37:25)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":38:20)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":39:20)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:28)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:26)
#loc18 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":266:46)
#loc19 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":256:15)
#loc20 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:15)
#loc21 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":41:13)
#loc22 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:13)
#loc23 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:8)
#loc24 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":44:15)
#loc25 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":45:12)
#loc26 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:16)
#loc27 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:4)
#loc28 = loc(callsite(#loc2 at #loc3))
#loc29 = loc(callsite(#loc18 at #loc3))
#loc30 = loc(callsite(#loc19 at #loc2))
#loc31 = loc(callsite(#loc30 at #loc3))
