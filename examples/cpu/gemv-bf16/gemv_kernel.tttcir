#loc = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)
module {
  tt.func public @gemv_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : vector<16xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : vector<16x64xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : vector<64xi64> loc(#loc1)
    %cst_2 = arith.constant dense<128> : vector<16x64xi64> loc(#loc1)
    %cst_3 = arith.constant dense<[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126]> : vector<64xi64> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : vector<1xf32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : vector<16x64xbf16> loc(#loc1)
    %c0 = arith.constant 0 : index loc(#loc1)
    %cst_6 = arith.constant dense<2> : vector<16x64xi32> loc(#loc1)
    %cst_7 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]> : vector<64xi32> loc(#loc1)
    %cst_8 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]> : vector<16xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : vector<16xf32> loc(#loc28)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc4)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %2 = vector.splat %1 : vector<16xi32> loc(#loc6)
    %3 = arith.addi %2, %cst_8 : vector<16xi32> loc(#loc6)
    %4 = vector.shape_cast %3 {axis = 1 : i32} : vector<16xi32> to vector<16x1xi32> loc(#loc7)
    %5 = vector.splat %arg5 : vector<16x1xi32> loc(#loc8)
    %6 = arith.muli %4, %5 : vector<16x1xi32> loc(#loc8)
    %7 = vector.shape_cast %cst_7 {axis = 0 : i32} : vector<64xi32> to vector<1x64xi32> loc(#loc9)
    %8 = vector.broadcast %6 : vector<16x1xi32> to vector<16x64xi32> loc(#loc10)
    %9 = vector.broadcast %7 : vector<1x64xi32> to vector<16x64xi32> loc(#loc10)
    %10 = arith.addi %8, %9 : vector<16x64xi32> loc(#loc10)
    %11 = tt.ptr_to_int %arg1 : !tt.ptr<bf16> -> i64 loc(#loc11)
    %12 = vector.splat %11 : vector<16x64xi64> loc(#loc11)
    %13 = arith.muli %10, %cst_6 : vector<16x64xi32> loc(#loc11)
    %14 = arith.extsi %13 : vector<16x64xi32> to vector<16x64xi64> loc(#loc11)
    %15 = arith.addi %12, %14 : vector<16x64xi64> loc(#loc11)
    %16 = tt.ptr_to_int %arg2 : !tt.ptr<bf16> -> i64 loc(#loc12)
    %17 = vector.splat %16 : vector<64xi64> loc(#loc12)
    %18 = arith.addi %17, %cst_3 : vector<64xi64> loc(#loc12)
    %19:3 = scf.for %arg6 = %c0_i32 to %arg4 step %c64_i32 iter_args(%arg7 = %cst_9, %arg8 = %15, %arg9 = %18) -> (vector<16xf32>, vector<16x64xi64>, vector<64xi64>)  : i32 {
      %26 = vector.extract %arg8[0, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %27 = tt.int_to_ptr %26 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %28 = triton_cpu.ptr_to_memref %27 : <bf16> -> memref<64xbf16> loc(#loc14)
      %29 = vector.load %28[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %30 = vector.insert %29, %cst_5 [0] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %31 = vector.extract %arg8[1, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %32 = tt.int_to_ptr %31 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %33 = triton_cpu.ptr_to_memref %32 : <bf16> -> memref<64xbf16> loc(#loc14)
      %34 = vector.load %33[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %35 = vector.insert %34, %30 [1] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %36 = vector.extract %arg8[2, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %37 = tt.int_to_ptr %36 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %38 = triton_cpu.ptr_to_memref %37 : <bf16> -> memref<64xbf16> loc(#loc14)
      %39 = vector.load %38[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %40 = vector.insert %39, %35 [2] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %41 = vector.extract %arg8[3, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %42 = tt.int_to_ptr %41 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %43 = triton_cpu.ptr_to_memref %42 : <bf16> -> memref<64xbf16> loc(#loc14)
      %44 = vector.load %43[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %45 = vector.insert %44, %40 [3] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %46 = vector.extract %arg8[4, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %47 = tt.int_to_ptr %46 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %48 = triton_cpu.ptr_to_memref %47 : <bf16> -> memref<64xbf16> loc(#loc14)
      %49 = vector.load %48[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %50 = vector.insert %49, %45 [4] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %51 = vector.extract %arg8[5, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %52 = tt.int_to_ptr %51 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %53 = triton_cpu.ptr_to_memref %52 : <bf16> -> memref<64xbf16> loc(#loc14)
      %54 = vector.load %53[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %55 = vector.insert %54, %50 [5] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %56 = vector.extract %arg8[6, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %57 = tt.int_to_ptr %56 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %58 = triton_cpu.ptr_to_memref %57 : <bf16> -> memref<64xbf16> loc(#loc14)
      %59 = vector.load %58[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %60 = vector.insert %59, %55 [6] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %61 = vector.extract %arg8[7, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %62 = tt.int_to_ptr %61 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %63 = triton_cpu.ptr_to_memref %62 : <bf16> -> memref<64xbf16> loc(#loc14)
      %64 = vector.load %63[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %65 = vector.insert %64, %60 [7] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %66 = vector.extract %arg8[8, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %67 = tt.int_to_ptr %66 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %68 = triton_cpu.ptr_to_memref %67 : <bf16> -> memref<64xbf16> loc(#loc14)
      %69 = vector.load %68[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %70 = vector.insert %69, %65 [8] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %71 = vector.extract %arg8[9, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %72 = tt.int_to_ptr %71 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %73 = triton_cpu.ptr_to_memref %72 : <bf16> -> memref<64xbf16> loc(#loc14)
      %74 = vector.load %73[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %75 = vector.insert %74, %70 [9] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %76 = vector.extract %arg8[10, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %77 = tt.int_to_ptr %76 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %78 = triton_cpu.ptr_to_memref %77 : <bf16> -> memref<64xbf16> loc(#loc14)
      %79 = vector.load %78[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %80 = vector.insert %79, %75 [10] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %81 = vector.extract %arg8[11, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %82 = tt.int_to_ptr %81 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %83 = triton_cpu.ptr_to_memref %82 : <bf16> -> memref<64xbf16> loc(#loc14)
      %84 = vector.load %83[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %85 = vector.insert %84, %80 [11] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %86 = vector.extract %arg8[12, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %87 = tt.int_to_ptr %86 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %88 = triton_cpu.ptr_to_memref %87 : <bf16> -> memref<64xbf16> loc(#loc14)
      %89 = vector.load %88[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %90 = vector.insert %89, %85 [12] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %91 = vector.extract %arg8[13, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %92 = tt.int_to_ptr %91 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %93 = triton_cpu.ptr_to_memref %92 : <bf16> -> memref<64xbf16> loc(#loc14)
      %94 = vector.load %93[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %95 = vector.insert %94, %90 [13] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %96 = vector.extract %arg8[14, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %97 = tt.int_to_ptr %96 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %98 = triton_cpu.ptr_to_memref %97 : <bf16> -> memref<64xbf16> loc(#loc14)
      %99 = vector.load %98[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %100 = vector.insert %99, %95 [14] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %101 = vector.extract %arg8[15, 0] : i64 from vector<16x64xi64> loc(#loc14)
      %102 = tt.int_to_ptr %101 : i64 -> !tt.ptr<bf16> loc(#loc14)
      %103 = triton_cpu.ptr_to_memref %102 : <bf16> -> memref<64xbf16> loc(#loc14)
      %104 = vector.load %103[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc14)
      %105 = vector.insert %104, %100 [15] : vector<64xbf16> into vector<16x64xbf16> loc(#loc14)
      %106 = vector.extract %arg9[0] : i64 from vector<64xi64> loc(#loc15)
      %107 = tt.int_to_ptr %106 : i64 -> !tt.ptr<bf16> loc(#loc15)
      %108 = triton_cpu.ptr_to_memref %107 : <bf16> -> memref<64xbf16> loc(#loc15)
      %109 = vector.load %108[%c0] : memref<64xbf16>, vector<64xbf16> loc(#loc15)
      %110 = vector.shape_cast %109 {axis = 0 : i32} : vector<64xbf16> to vector<1x64xbf16> loc(#loc16)
      %111 = vector.broadcast %110 : vector<1x64xbf16> to vector<16x64xbf16> loc(#loc17)
      %112 = arith.bitcast %105 : vector<16x64xbf16> to vector<16x64xi16> loc(#loc17)
      %113 = arith.extui %112 : vector<16x64xi16> to vector<16x64xi32> loc(#loc17)
      %114 = arith.shli %113, %cst_0 : vector<16x64xi32> loc(#loc17)
      %115 = arith.bitcast %114 : vector<16x64xi32> to vector<16x64xf32> loc(#loc17)
      %116 = arith.bitcast %111 : vector<16x64xbf16> to vector<16x64xi16> loc(#loc17)
      %117 = arith.extui %116 : vector<16x64xi16> to vector<16x64xi32> loc(#loc17)
      %118 = arith.shli %117, %cst_0 : vector<16x64xi32> loc(#loc17)
      %119 = arith.bitcast %118 : vector<16x64xi32> to vector<16x64xf32> loc(#loc17)
      %120 = arith.mulf %115, %119 : vector<16x64xf32> loc(#loc17)
      %121 = arith.bitcast %120 : vector<16x64xf32> to vector<16x64xi32> loc(#loc17)
      %122 = arith.shrui %121, %cst_0 : vector<16x64xi32> loc(#loc17)
      %123 = arith.trunci %122 : vector<16x64xi32> to vector<16x64xi16> loc(#loc17)
      %124 = arith.extui %123 : vector<16x64xi16> to vector<16x64xi32> loc(#loc29)
      %125 = arith.shli %124, %cst_0 : vector<16x64xi32> loc(#loc29)
      %126 = arith.bitcast %125 : vector<16x64xi32> to vector<16x64xf32> loc(#loc29)
      %127 = vector.extract %126[0] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %128 = vector.shuffle %127, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %129 = arith.addf %127, %128 : vector<64xf32> loc(#loc31)
      %130 = vector.shuffle %129, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %131 = arith.addf %129, %130 : vector<64xf32> loc(#loc31)
      %132 = vector.shuffle %131, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %133 = arith.addf %131, %132 : vector<64xf32> loc(#loc31)
      %134 = vector.shuffle %133, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %135 = arith.addf %133, %134 : vector<64xf32> loc(#loc31)
      %136 = vector.shuffle %135, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %137 = arith.addf %135, %136 : vector<64xf32> loc(#loc31)
      %138 = vector.shuffle %137, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %139 = arith.addf %137, %138 : vector<64xf32> loc(#loc31)
      %140 = vector.extractelement %139[%c0 : index] : vector<64xf32> loc(#loc28)
      %141 = vector.insert %140, %cst_9 [0] : f32 into vector<16xf32> loc(#loc28)
      %142 = vector.extract %126[1] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %143 = vector.shuffle %142, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %144 = arith.addf %142, %143 : vector<64xf32> loc(#loc31)
      %145 = vector.shuffle %144, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %146 = arith.addf %144, %145 : vector<64xf32> loc(#loc31)
      %147 = vector.shuffle %146, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %148 = arith.addf %146, %147 : vector<64xf32> loc(#loc31)
      %149 = vector.shuffle %148, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %150 = arith.addf %148, %149 : vector<64xf32> loc(#loc31)
      %151 = vector.shuffle %150, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %152 = arith.addf %150, %151 : vector<64xf32> loc(#loc31)
      %153 = vector.shuffle %152, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %154 = arith.addf %152, %153 : vector<64xf32> loc(#loc31)
      %155 = vector.extractelement %154[%c0 : index] : vector<64xf32> loc(#loc28)
      %156 = vector.insert %155, %141 [1] : f32 into vector<16xf32> loc(#loc28)
      %157 = vector.extract %126[2] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %158 = vector.shuffle %157, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %159 = arith.addf %157, %158 : vector<64xf32> loc(#loc31)
      %160 = vector.shuffle %159, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %161 = arith.addf %159, %160 : vector<64xf32> loc(#loc31)
      %162 = vector.shuffle %161, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %163 = arith.addf %161, %162 : vector<64xf32> loc(#loc31)
      %164 = vector.shuffle %163, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %165 = arith.addf %163, %164 : vector<64xf32> loc(#loc31)
      %166 = vector.shuffle %165, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %167 = arith.addf %165, %166 : vector<64xf32> loc(#loc31)
      %168 = vector.shuffle %167, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %169 = arith.addf %167, %168 : vector<64xf32> loc(#loc31)
      %170 = vector.extractelement %169[%c0 : index] : vector<64xf32> loc(#loc28)
      %171 = vector.insert %170, %156 [2] : f32 into vector<16xf32> loc(#loc28)
      %172 = vector.extract %126[3] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %173 = vector.shuffle %172, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %174 = arith.addf %172, %173 : vector<64xf32> loc(#loc31)
      %175 = vector.shuffle %174, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %176 = arith.addf %174, %175 : vector<64xf32> loc(#loc31)
      %177 = vector.shuffle %176, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %178 = arith.addf %176, %177 : vector<64xf32> loc(#loc31)
      %179 = vector.shuffle %178, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %180 = arith.addf %178, %179 : vector<64xf32> loc(#loc31)
      %181 = vector.shuffle %180, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %182 = arith.addf %180, %181 : vector<64xf32> loc(#loc31)
      %183 = vector.shuffle %182, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %184 = arith.addf %182, %183 : vector<64xf32> loc(#loc31)
      %185 = vector.extractelement %184[%c0 : index] : vector<64xf32> loc(#loc28)
      %186 = vector.insert %185, %171 [3] : f32 into vector<16xf32> loc(#loc28)
      %187 = vector.extract %126[4] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %188 = vector.shuffle %187, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %189 = arith.addf %187, %188 : vector<64xf32> loc(#loc31)
      %190 = vector.shuffle %189, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %191 = arith.addf %189, %190 : vector<64xf32> loc(#loc31)
      %192 = vector.shuffle %191, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %193 = arith.addf %191, %192 : vector<64xf32> loc(#loc31)
      %194 = vector.shuffle %193, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %195 = arith.addf %193, %194 : vector<64xf32> loc(#loc31)
      %196 = vector.shuffle %195, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %197 = arith.addf %195, %196 : vector<64xf32> loc(#loc31)
      %198 = vector.shuffle %197, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %199 = arith.addf %197, %198 : vector<64xf32> loc(#loc31)
      %200 = vector.extractelement %199[%c0 : index] : vector<64xf32> loc(#loc28)
      %201 = vector.insert %200, %186 [4] : f32 into vector<16xf32> loc(#loc28)
      %202 = vector.extract %126[5] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %203 = vector.shuffle %202, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %204 = arith.addf %202, %203 : vector<64xf32> loc(#loc31)
      %205 = vector.shuffle %204, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %206 = arith.addf %204, %205 : vector<64xf32> loc(#loc31)
      %207 = vector.shuffle %206, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %208 = arith.addf %206, %207 : vector<64xf32> loc(#loc31)
      %209 = vector.shuffle %208, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %210 = arith.addf %208, %209 : vector<64xf32> loc(#loc31)
      %211 = vector.shuffle %210, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %212 = arith.addf %210, %211 : vector<64xf32> loc(#loc31)
      %213 = vector.shuffle %212, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %214 = arith.addf %212, %213 : vector<64xf32> loc(#loc31)
      %215 = vector.extractelement %214[%c0 : index] : vector<64xf32> loc(#loc28)
      %216 = vector.insert %215, %201 [5] : f32 into vector<16xf32> loc(#loc28)
      %217 = vector.extract %126[6] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %218 = vector.shuffle %217, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %219 = arith.addf %217, %218 : vector<64xf32> loc(#loc31)
      %220 = vector.shuffle %219, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %221 = arith.addf %219, %220 : vector<64xf32> loc(#loc31)
      %222 = vector.shuffle %221, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %223 = arith.addf %221, %222 : vector<64xf32> loc(#loc31)
      %224 = vector.shuffle %223, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %225 = arith.addf %223, %224 : vector<64xf32> loc(#loc31)
      %226 = vector.shuffle %225, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %227 = arith.addf %225, %226 : vector<64xf32> loc(#loc31)
      %228 = vector.shuffle %227, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %229 = arith.addf %227, %228 : vector<64xf32> loc(#loc31)
      %230 = vector.extractelement %229[%c0 : index] : vector<64xf32> loc(#loc28)
      %231 = vector.insert %230, %216 [6] : f32 into vector<16xf32> loc(#loc28)
      %232 = vector.extract %126[7] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %233 = vector.shuffle %232, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %234 = arith.addf %232, %233 : vector<64xf32> loc(#loc31)
      %235 = vector.shuffle %234, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %236 = arith.addf %234, %235 : vector<64xf32> loc(#loc31)
      %237 = vector.shuffle %236, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %238 = arith.addf %236, %237 : vector<64xf32> loc(#loc31)
      %239 = vector.shuffle %238, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %240 = arith.addf %238, %239 : vector<64xf32> loc(#loc31)
      %241 = vector.shuffle %240, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %242 = arith.addf %240, %241 : vector<64xf32> loc(#loc31)
      %243 = vector.shuffle %242, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %244 = arith.addf %242, %243 : vector<64xf32> loc(#loc31)
      %245 = vector.extractelement %244[%c0 : index] : vector<64xf32> loc(#loc28)
      %246 = vector.insert %245, %231 [7] : f32 into vector<16xf32> loc(#loc28)
      %247 = vector.extract %126[8] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %248 = vector.shuffle %247, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %249 = arith.addf %247, %248 : vector<64xf32> loc(#loc31)
      %250 = vector.shuffle %249, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %251 = arith.addf %249, %250 : vector<64xf32> loc(#loc31)
      %252 = vector.shuffle %251, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %253 = arith.addf %251, %252 : vector<64xf32> loc(#loc31)
      %254 = vector.shuffle %253, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %255 = arith.addf %253, %254 : vector<64xf32> loc(#loc31)
      %256 = vector.shuffle %255, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %257 = arith.addf %255, %256 : vector<64xf32> loc(#loc31)
      %258 = vector.shuffle %257, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %259 = arith.addf %257, %258 : vector<64xf32> loc(#loc31)
      %260 = vector.extractelement %259[%c0 : index] : vector<64xf32> loc(#loc28)
      %261 = vector.insert %260, %246 [8] : f32 into vector<16xf32> loc(#loc28)
      %262 = vector.extract %126[9] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %263 = vector.shuffle %262, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %264 = arith.addf %262, %263 : vector<64xf32> loc(#loc31)
      %265 = vector.shuffle %264, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %266 = arith.addf %264, %265 : vector<64xf32> loc(#loc31)
      %267 = vector.shuffle %266, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %268 = arith.addf %266, %267 : vector<64xf32> loc(#loc31)
      %269 = vector.shuffle %268, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %270 = arith.addf %268, %269 : vector<64xf32> loc(#loc31)
      %271 = vector.shuffle %270, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %272 = arith.addf %270, %271 : vector<64xf32> loc(#loc31)
      %273 = vector.shuffle %272, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %274 = arith.addf %272, %273 : vector<64xf32> loc(#loc31)
      %275 = vector.extractelement %274[%c0 : index] : vector<64xf32> loc(#loc28)
      %276 = vector.insert %275, %261 [9] : f32 into vector<16xf32> loc(#loc28)
      %277 = vector.extract %126[10] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %278 = vector.shuffle %277, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %279 = arith.addf %277, %278 : vector<64xf32> loc(#loc31)
      %280 = vector.shuffle %279, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %281 = arith.addf %279, %280 : vector<64xf32> loc(#loc31)
      %282 = vector.shuffle %281, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %283 = arith.addf %281, %282 : vector<64xf32> loc(#loc31)
      %284 = vector.shuffle %283, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %285 = arith.addf %283, %284 : vector<64xf32> loc(#loc31)
      %286 = vector.shuffle %285, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %287 = arith.addf %285, %286 : vector<64xf32> loc(#loc31)
      %288 = vector.shuffle %287, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %289 = arith.addf %287, %288 : vector<64xf32> loc(#loc31)
      %290 = vector.extractelement %289[%c0 : index] : vector<64xf32> loc(#loc28)
      %291 = vector.insert %290, %276 [10] : f32 into vector<16xf32> loc(#loc28)
      %292 = vector.extract %126[11] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %293 = vector.shuffle %292, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %294 = arith.addf %292, %293 : vector<64xf32> loc(#loc31)
      %295 = vector.shuffle %294, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %296 = arith.addf %294, %295 : vector<64xf32> loc(#loc31)
      %297 = vector.shuffle %296, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %298 = arith.addf %296, %297 : vector<64xf32> loc(#loc31)
      %299 = vector.shuffle %298, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %300 = arith.addf %298, %299 : vector<64xf32> loc(#loc31)
      %301 = vector.shuffle %300, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %302 = arith.addf %300, %301 : vector<64xf32> loc(#loc31)
      %303 = vector.shuffle %302, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %304 = arith.addf %302, %303 : vector<64xf32> loc(#loc31)
      %305 = vector.extractelement %304[%c0 : index] : vector<64xf32> loc(#loc28)
      %306 = vector.insert %305, %291 [11] : f32 into vector<16xf32> loc(#loc28)
      %307 = vector.extract %126[12] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %308 = vector.shuffle %307, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %309 = arith.addf %307, %308 : vector<64xf32> loc(#loc31)
      %310 = vector.shuffle %309, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %311 = arith.addf %309, %310 : vector<64xf32> loc(#loc31)
      %312 = vector.shuffle %311, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %313 = arith.addf %311, %312 : vector<64xf32> loc(#loc31)
      %314 = vector.shuffle %313, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %315 = arith.addf %313, %314 : vector<64xf32> loc(#loc31)
      %316 = vector.shuffle %315, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %317 = arith.addf %315, %316 : vector<64xf32> loc(#loc31)
      %318 = vector.shuffle %317, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %319 = arith.addf %317, %318 : vector<64xf32> loc(#loc31)
      %320 = vector.extractelement %319[%c0 : index] : vector<64xf32> loc(#loc28)
      %321 = vector.insert %320, %306 [12] : f32 into vector<16xf32> loc(#loc28)
      %322 = vector.extract %126[13] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %323 = vector.shuffle %322, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %324 = arith.addf %322, %323 : vector<64xf32> loc(#loc31)
      %325 = vector.shuffle %324, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %326 = arith.addf %324, %325 : vector<64xf32> loc(#loc31)
      %327 = vector.shuffle %326, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %328 = arith.addf %326, %327 : vector<64xf32> loc(#loc31)
      %329 = vector.shuffle %328, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %330 = arith.addf %328, %329 : vector<64xf32> loc(#loc31)
      %331 = vector.shuffle %330, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %332 = arith.addf %330, %331 : vector<64xf32> loc(#loc31)
      %333 = vector.shuffle %332, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %334 = arith.addf %332, %333 : vector<64xf32> loc(#loc31)
      %335 = vector.extractelement %334[%c0 : index] : vector<64xf32> loc(#loc28)
      %336 = vector.insert %335, %321 [13] : f32 into vector<16xf32> loc(#loc28)
      %337 = vector.extract %126[14] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %338 = vector.shuffle %337, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %339 = arith.addf %337, %338 : vector<64xf32> loc(#loc31)
      %340 = vector.shuffle %339, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %341 = arith.addf %339, %340 : vector<64xf32> loc(#loc31)
      %342 = vector.shuffle %341, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %343 = arith.addf %341, %342 : vector<64xf32> loc(#loc31)
      %344 = vector.shuffle %343, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %345 = arith.addf %343, %344 : vector<64xf32> loc(#loc31)
      %346 = vector.shuffle %345, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %347 = arith.addf %345, %346 : vector<64xf32> loc(#loc31)
      %348 = vector.shuffle %347, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %349 = arith.addf %347, %348 : vector<64xf32> loc(#loc31)
      %350 = vector.extractelement %349[%c0 : index] : vector<64xf32> loc(#loc28)
      %351 = vector.insert %350, %336 [14] : f32 into vector<16xf32> loc(#loc28)
      %352 = vector.extract %126[15] : vector<64xf32> from vector<16x64xf32> loc(#loc28)
      %353 = vector.shuffle %352, %cst_4 [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %354 = arith.addf %352, %353 : vector<64xf32> loc(#loc31)
      %355 = vector.shuffle %354, %cst_4 [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %356 = arith.addf %354, %355 : vector<64xf32> loc(#loc31)
      %357 = vector.shuffle %356, %cst_4 [8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %358 = arith.addf %356, %357 : vector<64xf32> loc(#loc31)
      %359 = vector.shuffle %358, %cst_4 [4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %360 = arith.addf %358, %359 : vector<64xf32> loc(#loc31)
      %361 = vector.shuffle %360, %cst_4 [2, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %362 = arith.addf %360, %361 : vector<64xf32> loc(#loc31)
      %363 = vector.shuffle %362, %cst_4 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63] : vector<64xf32>, vector<1xf32> loc(#loc28)
      %364 = arith.addf %362, %363 : vector<64xf32> loc(#loc31)
      %365 = vector.extractelement %364[%c0 : index] : vector<64xf32> loc(#loc28)
      %366 = vector.insert %365, %351 [15] : f32 into vector<16xf32> loc(#loc28)
      %367 = arith.addf %arg7, %366 : vector<16xf32> loc(#loc20)
      %368 = arith.addi %arg8, %cst_2 : vector<16x64xi64> loc(#loc21)
      %369 = arith.addi %arg9, %cst_1 : vector<64xi64> loc(#loc22)
      scf.yield %367, %368, %369 : vector<16xf32>, vector<16x64xi64>, vector<64xi64> loc(#loc23)
    } loc(#loc13)
    %20 = arith.bitcast %19#0 : vector<16xf32> to vector<16xi32> loc(#loc24)
    %21 = arith.shrui %20, %cst : vector<16xi32> loc(#loc24)
    %22 = arith.trunci %21 : vector<16xi32> to vector<16xi16> loc(#loc24)
    %23 = arith.bitcast %22 : vector<16xi16> to vector<16xbf16> loc(#loc24)
    %24 = tt.addptr %arg0, %1 : !tt.ptr<bf16>, i32 loc(#loc25)
    %25 = triton_cpu.ptr_to_memref %24 : <bf16> -> memref<16xbf16> loc(#loc26)
    vector.store %23, %25[%c0] : memref<16xbf16>, vector<16xbf16> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":267:36)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:22)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":29:28)
#loc5 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:19)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:34)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:16)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:27)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:42)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:39)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:13)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":34:12)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":37:25)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":38:20)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":39:20)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:28)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:26)
#loc18 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":266:46)
#loc19 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":256:15)
#loc20 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:15)
#loc21 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":41:13)
#loc22 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:13)
#loc23 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:8)
#loc24 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":44:15)
#loc25 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":45:12)
#loc26 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:16)
#loc27 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:4)
#loc28 = loc(callsite(#loc2 at #loc3))
#loc29 = loc(callsite(#loc18 at #loc3))
#loc30 = loc(callsite(#loc19 at #loc2))
#loc31 = loc(callsite(#loc30 at #loc3))
