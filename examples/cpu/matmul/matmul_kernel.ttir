#loc = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0)
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32x32xi32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c31_i32 : i32 loc(#loc49)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc50)
    %3 = arith.addi %arg4, %c31_i32 : i32 loc(#loc51)
    %4 = arith.divsi %3, %c32_i32 : i32 loc(#loc52)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %9 : i32 loc(#loc12)
    %11 = arith.addi %7, %10 : i32 loc(#loc13)
    %12 = arith.remsi %0, %5 : i32 loc(#loc14)
    %13 = arith.divsi %12, %9 : i32 loc(#loc15)
    %14 = arith.muli %11, %c32_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc17)
    %16 = tt.splat %14 : i32 -> tensor<32xi32> loc(#loc18)
    %17 = arith.addi %16, %15 : tensor<32xi32> loc(#loc18)
    %18 = tt.splat %arg3 : i32 -> tensor<32xi32> loc(#loc19)
    %19 = arith.remsi %17, %18 : tensor<32xi32> loc(#loc19)
    %20 = arith.muli %13, %c32_i32 : i32 loc(#loc20)
    %21 = tt.splat %20 : i32 -> tensor<32xi32> loc(#loc21)
    %22 = arith.addi %21, %15 : tensor<32xi32> loc(#loc21)
    %23 = tt.splat %arg4 : i32 -> tensor<32xi32> loc(#loc22)
    %24 = arith.remsi %22, %23 : tensor<32xi32> loc(#loc22)
    %25 = tt.expand_dims %19 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc23)
    %26 = tt.splat %arg6 : i32 -> tensor<32x1xi32> loc(#loc24)
    %27 = arith.muli %25, %26 : tensor<32x1xi32> loc(#loc24)
    %28 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc25)
    %29 = tt.broadcast %27 : tensor<32x1xi32> -> tensor<32x32xi32> loc(#loc26)
    %30 = tt.broadcast %28 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc26)
    %31 = arith.addi %29, %30 : tensor<32x32xi32> loc(#loc26)
    %32 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>> loc(#loc27)
    %33 = tt.addptr %32, %31 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc27)
    %34 = tt.expand_dims %15 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc28)
    %35 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc29)
    %36 = arith.muli %34, %35 : tensor<32x1xi32> loc(#loc29)
    %37 = tt.expand_dims %24 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc30)
    %38 = tt.broadcast %36 : tensor<32x1xi32> -> tensor<32x32xi32> loc(#loc31)
    %39 = tt.broadcast %37 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc31)
    %40 = arith.addi %38, %39 : tensor<32x32xi32> loc(#loc31)
    %41 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>> loc(#loc32)
    %42 = tt.addptr %41, %40 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc32)
    %43 = arith.addi %arg5, %c31_i32 : i32 loc(#loc53)
    %44 = arith.divsi %43, %c32_i32 : i32 loc(#loc54)
    %45 = arith.muli %arg7, %c32_i32 : i32 loc(#loc34)
    %46 = tt.splat %45 : i32 -> tensor<32x32xi32> loc(#loc35)
    %47:3 = scf.for %arg9 = %c0_i32 to %44 step %c1_i32 iter_args(%arg10 = %cst, %arg11 = %33, %arg12 = %42) -> (tensor<32x32xf32>, tensor<32x32x!tt.ptr<f32>>, tensor<32x32x!tt.ptr<f32>>)  : i32 {
      %57 = tt.load %arg11 : tensor<32x32x!tt.ptr<f32>> loc(#loc37)
      %58 = tt.load %arg12 : tensor<32x32x!tt.ptr<f32>> loc(#loc38)
      %59 = tt.dot %57, %58, %arg10, inputPrecision = tf32 : tensor<32x32xf32> * tensor<32x32xf32> -> tensor<32x32xf32> loc(#loc39)
      %60 = tt.addptr %arg11, %cst_0 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc40)
      %61 = tt.addptr %arg12, %46 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc35)
      scf.yield %59, %60, %61 : tensor<32x32xf32>, tensor<32x32x!tt.ptr<f32>>, tensor<32x32x!tt.ptr<f32>> loc(#loc41)
    } loc(#loc36)
    %48 = tt.expand_dims %17 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc42)
    %49 = tt.splat %arg8 : i32 -> tensor<32x1xi32> loc(#loc43)
    %50 = arith.muli %49, %48 : tensor<32x1xi32> loc(#loc43)
    %51 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc44)
    %52 = tt.addptr %51, %50 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc44)
    %53 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc45)
    %54 = tt.broadcast %52 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x32x!tt.ptr<f32>> loc(#loc46)
    %55 = tt.broadcast %53 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc46)
    %56 = tt.addptr %54, %55 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc46)
    tt.store %56, %47#0 : tensor<32x32x!tt.ptr<f32>> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":187:24)
#loc3 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":40:22)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":188:27)
#loc5 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":40:28)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":189:27)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":190:38)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":191:22)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":192:29)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":193:35)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":193:48)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":194:33)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":194:27)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":195:19)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":195:40)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:23)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:51)
#loc18 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:38)
#loc19 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:68)
#loc20 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:23)
#loc21 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:38)
#loc22 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:68)
#loc23 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:30)
#loc24 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:41)
#loc25 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:60)
#loc26 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:53)
#loc27 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:22)
#loc28 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:29)
#loc29 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:40)
#loc30 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:60)
#loc31 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:52)
#loc32 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:22)
#loc33 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":216:33)
#loc34 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:33)
#loc35 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:18)
#loc36 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":216:22)
#loc37 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":223:20)
#loc38 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":224:20)
#loc39 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":226:35)
#loc40 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":228:18)
#loc41 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:8)
#loc42 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:41)
#loc43 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:33)
#loc44 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:21)
#loc45 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:72)
#loc46 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:52)
#loc47 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":243:21)
#loc48 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":243:4)
#loc49 = loc(callsite(#loc3 at #loc4))
#loc50 = loc(callsite(#loc5 at #loc4))
#loc51 = loc(callsite(#loc3 at #loc6))
#loc52 = loc(callsite(#loc5 at #loc6))
#loc53 = loc(callsite(#loc3 at #loc33))
#loc54 = loc(callsite(#loc5 at #loc33))
