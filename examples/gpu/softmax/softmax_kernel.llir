; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @softmax_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) nocapture readnone %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = tail call i32 asm "mov.u32 $0, %nctaid.x;", "=r"() #3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 255, !dbg !12
  %12 = icmp slt i32 %11, %5, !dbg !13
  %13 = icmp slt i32 %8, %4, !dbg !14
  %14 = mul i32 %8, %2, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = zext nneg i32 %11 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %16, i64 %17, !dbg !17
  %19 = and i1 %12, %13, !dbg !14
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !18
  %21 = select i1 %19, i32 4, i32 0, !dbg !18
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %20, ptr addrspace(1) %18, i32 %21, i1 true) #3, !dbg !18
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !18
  %invariant.gep2 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !14
  %invariant.gep4 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !14
  br i1 %13, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7
  %22 = lshr i32 %10, 5, !dbg !12
  %23 = and i32 %10, 31, !dbg !12
  %24 = sub i32 %4, %9
  %25 = icmp eq i32 %23, 0
  %26 = and i32 %22, 7
  %27 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %26
  %28 = icmp slt i32 %10, 8
  %29 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10
  %30 = and i32 %10, 7
  %31 = icmp eq i32 %30, 0
  %32 = and i1 %28, %31
  br label %33, !dbg !14

33:                                               ; preds = %.lr.ph, %33
  %34 = phi i32 [ -1, %.lr.ph ], [ %39, %33 ]
  %35 = phi i32 [ %8, %.lr.ph ], [ %121, %33 ]
  %36 = icmp slt i32 %35, %24, !dbg !14
  %37 = add i32 %34, 1, !dbg !14
  %38 = icmp ugt i32 %34, 2147483646, !dbg !14
  %39 = select i1 %38, i32 %37, i32 0, !dbg !14
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %.idx = shl i32 %39, 10, !dbg !18
  %gep = getelementptr i8, ptr addrspace(3) %20, i32 %.idx, !dbg !18
  %40 = load float, ptr addrspace(3) %gep, align 4, !dbg !18
  %41 = select i1 %12, float %40, float 0xFFF0000000000000, !dbg !18
  %42 = bitcast float %41 to i32, !dbg !19
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !19
  %44 = bitcast i32 %43 to float, !dbg !19
  %45 = tail call float @llvm.maxnum.f32(float %41, float %44), !dbg !23
  %46 = bitcast float %45 to i32, !dbg !19
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !19
  %48 = bitcast i32 %47 to float, !dbg !19
  %49 = tail call float @llvm.maxnum.f32(float %45, float %48), !dbg !23
  %50 = bitcast float %49 to i32, !dbg !19
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !19
  %52 = bitcast i32 %51 to float, !dbg !19
  %53 = tail call float @llvm.maxnum.f32(float %49, float %52), !dbg !23
  %54 = bitcast float %53 to i32, !dbg !19
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = tail call float @llvm.maxnum.f32(float %53, float %56), !dbg !23
  %58 = bitcast float %57 to i32, !dbg !19
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = tail call float @llvm.maxnum.f32(float %57, float %60), !dbg !23
  %62 = bitcast float %61 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %62, i1 %25) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %63 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %29, i1 %28) #3, !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !19
  %66 = bitcast i32 %65 to float, !dbg !19
  %67 = tail call float @llvm.maxnum.f32(float %64, float %66), !dbg !23
  %68 = bitcast float %67 to i32, !dbg !19
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !19
  %70 = bitcast i32 %69 to float, !dbg !19
  %71 = tail call float @llvm.maxnum.f32(float %67, float %70), !dbg !23
  %72 = bitcast float %71 to i32, !dbg !19
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !19
  %74 = bitcast i32 %73 to float, !dbg !19
  %75 = tail call float @llvm.maxnum.f32(float %71, float %74), !dbg !23
  %76 = bitcast float %75 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %76, i1 %32) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %77 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), align 16, !dbg !19
  %78 = fsub float %41, %77, !dbg !25
  %79 = fmul float %78, 0x3FF7154760000000, !dbg !26
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %81 = bitcast float %80 to i32, !dbg !27
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = fadd float %80, %83, !dbg !29
  %85 = bitcast float %84 to i32, !dbg !27
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = fadd float %84, %87, !dbg !29
  %89 = bitcast float %88 to i32, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %88, %91, !dbg !29
  %93 = bitcast float %92 to i32, !dbg !27
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = fadd float %92, %95, !dbg !29
  %97 = bitcast float %96 to i32, !dbg !27
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = fadd float %96, %99, !dbg !29
  %101 = bitcast float %100 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %101, i1 %25) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %29, i1 %28) #3, !dbg !27
  %103 = bitcast i32 %102 to float, !dbg !27
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !27
  %105 = bitcast i32 %104 to float, !dbg !27
  %106 = fadd float %103, %105, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !27
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = fadd float %106, %109, !dbg !29
  %111 = bitcast float %110 to i32, !dbg !27
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = fadd float %110, %113, !dbg !29
  %115 = bitcast float %114 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %115, i1 %32) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %116 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), align 16, !dbg !27
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %116) #3, !dbg !30
  %118 = mul i32 %35, %3, !dbg !31
  %119 = sext i32 %118 to i64, !dbg !32
  %gep3 = getelementptr float, ptr addrspace(1) %invariant.gep2, i64 %119, !dbg !33
  %120 = bitcast float %117 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %gep3, i1 %12) #3, !dbg !34
  %121 = add i32 %35, %9, !dbg !14
  %122 = mul i32 %121, %2, !dbg !15
  %123 = sext i32 %122 to i64, !dbg !16
  %gep5 = getelementptr float, ptr addrspace(1) %invariant.gep4, i64 %123, !dbg !17
  %124 = and i1 %12, %36, !dbg !14
  %125 = select i1 %124, i32 4, i32 0, !dbg !18
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %20, ptr addrspace(1) %gep5, i32 %125, i1 true) #3, !dbg !18
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !18
  %126 = icmp slt i32 %121, %4, !dbg !14
  br i1 %126, label %33, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %33, %7
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !14
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "02-fused-softmax.py", directory: "/home/zhouxulin/intern/triton/python/tutorials")
!4 = !{ptr @softmax_kernel, !"kernel", i32 1}
!5 = !{ptr @softmax_kernel, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "softmax_kernel", linkageName: "softmax_kernel", scope: !3, file: !3, line: 83, type: !8, scopeLine: 83, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 86, column: 30, scope: !7)
!11 = !DILocation(line: 87, column: 31, scope: !7)
!12 = !DILocation(line: 93, column: 35, scope: !7)
!13 = !DILocation(line: 96, column: 29, scope: !7)
!14 = !DILocation(line: 88, column: 57, scope: !7)
!15 = !DILocation(line: 90, column: 46, scope: !7)
!16 = !DILocation(line: 90, column: 36, scope: !7)
!17 = !DILocation(line: 94, column: 37, scope: !7)
!18 = !DILocation(line: 97, column: 22, scope: !7)
!19 = !DILocation(line: 184, column: 40, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/zhouxulin/intern/triton/python/triton/language")
!22 = !DILocation(line: 99, column: 37, scope: !7)
!23 = !DILocation(line: 163, column: 27, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 99, column: 30, scope: !7)
!26 = !DILocation(line: 101, column: 27, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !28)
!28 = !DILocation(line: 102, column: 29, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !28)
!30 = !DILocation(line: 103, column: 37, scope: !7)
!31 = !DILocation(line: 105, column: 54, scope: !7)
!32 = !DILocation(line: 105, column: 44, scope: !7)
!33 = !DILocation(line: 106, column: 45, scope: !7)
!34 = !DILocation(line: 107, column: 30, scope: !7)
!35 = !DILocation(line: 88, column: 4, scope: !7)
