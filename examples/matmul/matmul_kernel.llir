; Generated from running python/tutorials/03-matrix-multiplication.py in triton repository.

; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @matmul_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, ptr addrspace(1) nocapture readnone %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %12 = add i32 %3, 31, !dbg !11
  %13 = sdiv i32 %12, 32, !dbg !15
  %14 = add i32 %4, 63, !dbg !16
  %15 = sdiv i32 %14, 64, !dbg !18
  %16 = shl nsw i32 %15, 3, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %.frozen502 = freeze i32 %16, !dbg !20
  %17 = sdiv i32 %.frozen, %.frozen502, !dbg !20
  %18 = shl i32 %17, 3, !dbg !21
  %19 = sub i32 %13, %18, !dbg !22
  %20 = tail call i32 @llvm.smin.i32(i32 %19, i32 8), !dbg !23
  %21 = mul i32 %17, %.frozen502, !dbg !24
  %.decomposed = sub i32 %.frozen, %21, !dbg !24
  %.frozen503 = freeze i32 %20, !dbg !25
  %22 = sdiv i32 %.decomposed, %.frozen503, !dbg !25
  %23 = mul i32 %22, %.frozen503, !dbg !26
  %.decomposed504 = sub i32 %.decomposed, %23, !dbg !26
  %24 = add i32 %.decomposed504, %18, !dbg !27
  %25 = shl i32 %24, 5, !dbg !28
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !29
  %27 = and i32 %26, 8, !dbg !29
  %28 = lshr i32 %26, 1, !dbg !29
  %29 = and i32 %28, 31, !dbg !29
  %30 = or disjoint i32 %25, %29, !dbg !30
  %31 = srem i32 %30, %3, !dbg !31
  %32 = shl i32 %22, 6, !dbg !32
  %33 = or disjoint i32 %32, %29, !dbg !33
  %34 = or disjoint i32 %33, 32, !dbg !33
  %35 = srem i32 %33, %4, !dbg !34
  %36 = srem i32 %34, %4, !dbg !34
  %37 = mul i32 %31, %6, !dbg !35
  %38 = shl i32 %26, 4, !dbg !36
  %39 = and i32 %38, 16, !dbg !36
  %40 = add i32 %37, %39, !dbg !37
  %41 = sext i32 %40 to i64, !dbg !38
  %42 = getelementptr i8, ptr addrspace(1) %0, i64 %41, !dbg !38
  %43 = mul i32 %35, %7, !dbg !39
  %44 = mul i32 %36, %7, !dbg !39
  %45 = add i32 %43, %39, !dbg !40
  %46 = add i32 %44, %39, !dbg !40
  %47 = sext i32 %45 to i64, !dbg !41
  %48 = getelementptr i8, ptr addrspace(1) %1, i64 %47, !dbg !41
  %49 = sext i32 %46 to i64, !dbg !41
  %50 = getelementptr i8, ptr addrspace(1) %1, i64 %49, !dbg !41
  %51 = add i32 %5, 31, !dbg !42
  %52 = sdiv i32 %51, 32, !dbg !44
  %53 = icmp sgt i32 %51, 31, !dbg !45
  %54 = icmp slt i32 %39, %5, !dbg !46
  %55 = and i1 %54, %53, !dbg !45
  %56 = shl nuw nsw i32 %27, 1, !dbg !47
  %57 = xor i32 %39, %56, !dbg !47
  %58 = shl nuw nsw i32 %29, 5, !dbg !47
  %59 = or disjoint i32 %58, %57, !dbg !47
  %60 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %59, !dbg !47
  %61 = select i1 %55, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %42, i32 %61, i1 true) #2, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !47
  %62 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %59, !dbg !48
  %63 = or disjoint i32 %59, 1024, !dbg !48
  %64 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %63, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %48, i32 %61, i1 true) #2, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %50, i32 %61, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %65 = icmp sgt i32 %51, 63, !dbg !45
  %66 = getelementptr i8, ptr addrspace(1) %42, i64 32, !dbg !49
  %67 = getelementptr i8, ptr addrspace(1) %48, i64 32, !dbg !50
  %68 = getelementptr i8, ptr addrspace(1) %50, i64 32, !dbg !50
  %69 = add i32 %5, -32, !dbg !51
  %70 = icmp slt i32 %39, %69, !dbg !46
  %71 = and i1 %65, %70, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %72 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %59, !dbg !47
  %73 = select i1 %71, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %66, i32 %73, i1 true) #2, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !47
  %74 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6144), i32 %59, !dbg !48
  %75 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 6144), i32 %63, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %67, i32 %73, i1 true) #2, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %68, i32 %73, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %76 = icmp sgt i32 %51, 95, !dbg !45
  %77 = getelementptr i8, ptr addrspace(1) %42, i64 64, !dbg !49
  %78 = getelementptr i8, ptr addrspace(1) %48, i64 64, !dbg !50
  %79 = getelementptr i8, ptr addrspace(1) %50, i64 64, !dbg !50
  %80 = add i32 %5, -64, !dbg !51
  %81 = icmp slt i32 %39, %80, !dbg !46
  %82 = and i1 %76, %81, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %83 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %59, !dbg !47
  %84 = select i1 %82, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %83, ptr addrspace(1) %77, i32 %84, i1 true) #2, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !47
  %85 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %59, !dbg !48
  %86 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8192), i32 %63, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %85, ptr addrspace(1) %78, i32 %84, i1 true) #2, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %86, ptr addrspace(1) %79, i32 %84, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %87 = icmp sgt i32 %51, 127, !dbg !45
  %88 = getelementptr i8, ptr addrspace(1) %42, i64 96, !dbg !49
  %89 = getelementptr i8, ptr addrspace(1) %48, i64 96, !dbg !50
  %90 = getelementptr i8, ptr addrspace(1) %50, i64 96, !dbg !50
  %91 = add i32 %5, -96, !dbg !51
  %92 = icmp slt i32 %39, %91, !dbg !46
  %93 = and i1 %87, %92, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %94 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 3072), i32 %59, !dbg !47
  %95 = select i1 %93, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %94, ptr addrspace(1) %88, i32 %95, i1 true) #2, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !47
  %96 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %59, !dbg !48
  %97 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 10240), i32 %63, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %89, i32 %95, i1 true) #2, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %90, i32 %95, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %98 = and i32 %26, 7, !dbg !47
  %99 = lshr i32 %26, 3, !dbg !47
  %100 = and i32 %99, 1, !dbg !47
  %101 = lshr i32 %26, 4, !dbg !47
  %102 = and i32 %101, 1, !dbg !47
  %103 = lshr i32 %98, 2, !dbg !47
  %104 = xor i32 %102, %103, !dbg !47
  %urem = shl i32 %26, 5, !dbg !47
  %105 = and i32 %urem, 480, !dbg !47
  %106 = shl nuw nsw i32 %104, 4, !dbg !47
  %107 = or disjoint i32 %106, %105, !dbg !47
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !47
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %108) #2, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !47
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !47
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !47
  %114 = getelementptr i8, ptr addrspace(3) %108, i32 512, !dbg !47
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %114) #2, !dbg !47
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !47
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !47
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !47
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !47
  %120 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %110) #2, !dbg !52
  %121 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %111) #2, !dbg !52
  %122 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %112) #2, !dbg !52
  %123 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %113) #2, !dbg !52
  %124 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %116) #2, !dbg !52
  %125 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %117) #2, !dbg !52
  %126 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %118) #2, !dbg !52
  %127 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %119) #2, !dbg !52
  %128 = shl nuw nsw i32 %102, 4, !dbg !48
  %129 = lshr i32 %26, 2, !dbg !48
  %130 = and i32 %129, 8, !dbg !48
  %131 = or disjoint i32 %128, %130, !dbg !48
  %132 = or disjoint i32 %131, %98, !dbg !48
  %133 = xor i32 %100, %103, !dbg !48
  %134 = shl nuw nsw i32 %132, 5, !dbg !48
  %135 = shl nuw nsw i32 %133, 4, !dbg !48
  %136 = or disjoint i32 %134, %135, !dbg !48
  %137 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %136, !dbg !48
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %137) #2, !dbg !48
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !48
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !48
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !48
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !48
  %143 = getelementptr i8, ptr addrspace(3) %137, i32 1024, !dbg !48
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #2, !dbg !48
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !48
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !48
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !48
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !48
  %149 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %139) #2, !dbg !52
  %150 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %140) #2, !dbg !52
  %151 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %141) #2, !dbg !52
  %152 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %142) #2, !dbg !52
  %153 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %145) #2, !dbg !52
  %154 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %146) #2, !dbg !52
  %155 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %147) #2, !dbg !52
  %156 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %148) #2, !dbg !52
  br i1 %53, label %.lr.ph, label %._crit_edge, !dbg !45

.lr.ph:                                           ; preds = %10
  %157 = add nsw i32 %52, -4
  %.neg304 = add nsw i32 %5, -128
  br label %158, !dbg !45

158:                                              ; preds = %.lr.ph, %158
  %159 = phi i32 [ 0, %.lr.ph ], [ %245, %158 ]
  %160 = phi i32 [ 3, %.lr.ph ], [ %232, %158 ]
  %.pn67311 = phi ptr addrspace(1) [ %90, %.lr.ph ], [ %229, %158 ]
  %.pn99310 = phi ptr addrspace(1) [ %89, %.lr.ph ], [ %228, %158 ]
  %.pn35309 = phi ptr addrspace(1) [ %88, %.lr.ph ], [ %227, %158 ]
  %161 = phi float [ 0.000000e+00, %.lr.ph ], [ %359, %158 ]
  %162 = phi float [ 0.000000e+00, %.lr.ph ], [ %360, %158 ]
  %163 = phi float [ 0.000000e+00, %.lr.ph ], [ %361, %158 ]
  %164 = phi float [ 0.000000e+00, %.lr.ph ], [ %362, %158 ]
  %165 = phi float [ 0.000000e+00, %.lr.ph ], [ %364, %158 ]
  %166 = phi float [ 0.000000e+00, %.lr.ph ], [ %365, %158 ]
  %167 = phi float [ 0.000000e+00, %.lr.ph ], [ %366, %158 ]
  %168 = phi float [ 0.000000e+00, %.lr.ph ], [ %367, %158 ]
  %169 = phi float [ 0.000000e+00, %.lr.ph ], [ %369, %158 ]
  %170 = phi float [ 0.000000e+00, %.lr.ph ], [ %370, %158 ]
  %171 = phi float [ 0.000000e+00, %.lr.ph ], [ %371, %158 ]
  %172 = phi float [ 0.000000e+00, %.lr.ph ], [ %372, %158 ]
  %173 = phi float [ 0.000000e+00, %.lr.ph ], [ %374, %158 ]
  %174 = phi float [ 0.000000e+00, %.lr.ph ], [ %375, %158 ]
  %175 = phi float [ 0.000000e+00, %.lr.ph ], [ %376, %158 ]
  %176 = phi float [ 0.000000e+00, %.lr.ph ], [ %377, %158 ]
  %177 = phi float [ 0.000000e+00, %.lr.ph ], [ %379, %158 ]
  %178 = phi float [ 0.000000e+00, %.lr.ph ], [ %380, %158 ]
  %179 = phi float [ 0.000000e+00, %.lr.ph ], [ %381, %158 ]
  %180 = phi float [ 0.000000e+00, %.lr.ph ], [ %382, %158 ]
  %181 = phi float [ 0.000000e+00, %.lr.ph ], [ %384, %158 ]
  %182 = phi float [ 0.000000e+00, %.lr.ph ], [ %385, %158 ]
  %183 = phi float [ 0.000000e+00, %.lr.ph ], [ %386, %158 ]
  %184 = phi float [ 0.000000e+00, %.lr.ph ], [ %387, %158 ]
  %185 = phi float [ 0.000000e+00, %.lr.ph ], [ %389, %158 ]
  %186 = phi float [ 0.000000e+00, %.lr.ph ], [ %390, %158 ]
  %187 = phi float [ 0.000000e+00, %.lr.ph ], [ %391, %158 ]
  %188 = phi float [ 0.000000e+00, %.lr.ph ], [ %392, %158 ]
  %189 = phi float [ 0.000000e+00, %.lr.ph ], [ %394, %158 ]
  %190 = phi float [ 0.000000e+00, %.lr.ph ], [ %395, %158 ]
  %191 = phi float [ 0.000000e+00, %.lr.ph ], [ %396, %158 ]
  %192 = phi float [ 0.000000e+00, %.lr.ph ], [ %397, %158 ]
  %193 = phi i32 [ 0, %.lr.ph ], [ %398, %158 ]
  %.pn = phi { <2 x half>, <2 x half> } [ %156, %.lr.ph ], [ %285, %158 ]
  %.pn409 = phi { <2 x half>, <2 x half> } [ %155, %.lr.ph ], [ %284, %158 ]
  %.pn412 = phi { <2 x half>, <2 x half> } [ %154, %.lr.ph ], [ %283, %158 ]
  %.pn413 = phi { <2 x half>, <2 x half> } [ %153, %.lr.ph ], [ %282, %158 ]
  %.pn416 = phi { <2 x half>, <2 x half> } [ %152, %.lr.ph ], [ %281, %158 ]
  %.pn417 = phi { <2 x half>, <2 x half> } [ %151, %.lr.ph ], [ %280, %158 ]
  %.pn420 = phi { <2 x half>, <2 x half> } [ %150, %.lr.ph ], [ %279, %158 ]
  %.pn421 = phi { <2 x half>, <2 x half> } [ %149, %.lr.ph ], [ %278, %158 ]
  %.pn424 = phi { <2 x half>, <2 x half> } [ %127, %.lr.ph ], [ %266, %158 ]
  %.pn425 = phi { <2 x half>, <2 x half> } [ %126, %.lr.ph ], [ %265, %158 ]
  %.pn426 = phi { <2 x half>, <2 x half> } [ %125, %.lr.ph ], [ %264, %158 ]
  %.pn427 = phi { <2 x half>, <2 x half> } [ %124, %.lr.ph ], [ %263, %158 ]
  %.pn432 = phi { <2 x half>, <2 x half> } [ %123, %.lr.ph ], [ %262, %158 ]
  %.pn433 = phi { <2 x half>, <2 x half> } [ %122, %.lr.ph ], [ %261, %158 ]
  %.pn434 = phi { <2 x half>, <2 x half> } [ %121, %.lr.ph ], [ %260, %158 ]
  %.pn435 = phi { <2 x half>, <2 x half> } [ %120, %.lr.ph ], [ %259, %158 ]
  %194 = extractvalue { <2 x half>, <2 x half> } %.pn435, 0, !dbg !52
  %195 = extractvalue { <2 x half>, <2 x half> } %.pn434, 0, !dbg !52
  %196 = extractvalue { <2 x half>, <2 x half> } %.pn433, 0, !dbg !52
  %197 = extractvalue { <2 x half>, <2 x half> } %.pn432, 0, !dbg !52
  %198 = extractvalue { <2 x half>, <2 x half> } %.pn435, 1, !dbg !52
  %199 = extractvalue { <2 x half>, <2 x half> } %.pn434, 1, !dbg !52
  %200 = extractvalue { <2 x half>, <2 x half> } %.pn433, 1, !dbg !52
  %201 = extractvalue { <2 x half>, <2 x half> } %.pn432, 1, !dbg !52
  %202 = extractvalue { <2 x half>, <2 x half> } %.pn427, 0, !dbg !52
  %203 = extractvalue { <2 x half>, <2 x half> } %.pn426, 0, !dbg !52
  %204 = extractvalue { <2 x half>, <2 x half> } %.pn425, 0, !dbg !52
  %205 = extractvalue { <2 x half>, <2 x half> } %.pn424, 0, !dbg !52
  %206 = extractvalue { <2 x half>, <2 x half> } %.pn427, 1, !dbg !52
  %207 = extractvalue { <2 x half>, <2 x half> } %.pn426, 1, !dbg !52
  %208 = extractvalue { <2 x half>, <2 x half> } %.pn425, 1, !dbg !52
  %209 = extractvalue { <2 x half>, <2 x half> } %.pn424, 1, !dbg !52
  %210 = extractvalue { <2 x half>, <2 x half> } %.pn421, 0, !dbg !52
  %211 = extractvalue { <2 x half>, <2 x half> } %.pn420, 0, !dbg !52
  %212 = extractvalue { <2 x half>, <2 x half> } %.pn421, 1, !dbg !52
  %213 = extractvalue { <2 x half>, <2 x half> } %.pn420, 1, !dbg !52
  %214 = extractvalue { <2 x half>, <2 x half> } %.pn417, 0, !dbg !52
  %215 = extractvalue { <2 x half>, <2 x half> } %.pn416, 0, !dbg !52
  %216 = extractvalue { <2 x half>, <2 x half> } %.pn417, 1, !dbg !52
  %217 = extractvalue { <2 x half>, <2 x half> } %.pn416, 1, !dbg !52
  %218 = extractvalue { <2 x half>, <2 x half> } %.pn413, 0, !dbg !52
  %219 = extractvalue { <2 x half>, <2 x half> } %.pn412, 0, !dbg !52
  %220 = extractvalue { <2 x half>, <2 x half> } %.pn413, 1, !dbg !52
  %221 = extractvalue { <2 x half>, <2 x half> } %.pn412, 1, !dbg !52
  %222 = extractvalue { <2 x half>, <2 x half> } %.pn409, 0, !dbg !52
  %223 = extractvalue { <2 x half>, <2 x half> } %.pn, 0, !dbg !52
  %224 = extractvalue { <2 x half>, <2 x half> } %.pn409, 1, !dbg !52
  %225 = extractvalue { <2 x half>, <2 x half> } %.pn, 1, !dbg !52
  %226 = icmp slt i32 %193, %157, !dbg !45
  %227 = getelementptr i8, ptr addrspace(1) %.pn35309, i64 32, !dbg !49
  %228 = getelementptr i8, ptr addrspace(1) %.pn99310, i64 32, !dbg !50
  %229 = getelementptr i8, ptr addrspace(1) %.pn67311, i64 32, !dbg !50
  %230 = add i32 %160, 1, !dbg !45
  %231 = icmp slt i32 %230, 4, !dbg !45
  %232 = select i1 %231, i32 %230, i32 0, !dbg !45
  %233 = shl i32 %193, 5, !dbg !51
  %234 = sub i32 %.neg304, %233, !dbg !51
  %235 = icmp slt i32 %39, %234, !dbg !46
  %236 = shl i32 %232, 10, !dbg !47
  %237 = and i1 %226, %235, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %gep = getelementptr i8, ptr addrspace(3) %60, i32 %236, !dbg !47
  %238 = select i1 %237, i32 16, i32 0, !dbg !47
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %227, i32 %238, i1 true) #2, !dbg !47
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !47
  %239 = shl i32 %232, 11, !dbg !48
  %240 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %239, !dbg !48
  %241 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 %59, !dbg !48
  %242 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 %63, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %241, ptr addrspace(1) %228, i32 %238, i1 true) #2, !dbg !48
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %242, ptr addrspace(1) %229, i32 %238, i1 true) #2, !dbg !48
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !48
  %243 = add i32 %159, 1, !dbg !45
  %244 = icmp slt i32 %243, 4, !dbg !45
  %245 = select i1 %244, i32 %243, i32 0, !dbg !45
  %246 = shl i32 %245, 10, !dbg !47
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %247 = shl i32 %245, 11, !dbg !48
  %gep306 = getelementptr i8, ptr addrspace(3) %108, i32 %246, !dbg !47
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %gep306) #2, !dbg !47
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !47
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !47
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !47
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !47
  %253 = getelementptr i8, ptr addrspace(3) %gep306, i32 512, !dbg !47
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %253) #2, !dbg !47
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !47
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !47
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !47
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !47
  %259 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %249) #2, !dbg !52
  %260 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %250) #2, !dbg !52
  %261 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %251) #2, !dbg !52
  %262 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %252) #2, !dbg !52
  %263 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %255) #2, !dbg !52
  %264 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %256) #2, !dbg !52
  %265 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %257) #2, !dbg !52
  %266 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %258) #2, !dbg !52
  %gep308 = getelementptr i8, ptr addrspace(3) %137, i32 %247, !dbg !48
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %gep308) #2, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !48
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !48
  %272 = getelementptr i8, ptr addrspace(3) %gep308, i32 1024, !dbg !48
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %272) #2, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !48
  %278 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %268) #2, !dbg !52
  %279 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %269) #2, !dbg !52
  %280 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %270) #2, !dbg !52
  %281 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %271) #2, !dbg !52
  %282 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %274) #2, !dbg !52
  %283 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %275) #2, !dbg !52
  %284 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %276) #2, !dbg !52
  %285 = tail call { <2 x half>, <2 x half> } asm "{                           \0Aprmt.b32 $0, 0, $2, 0x5140; \0A\09prmt.b32 $1, 0, $2, 0x7362; \0A\09}", "=r,=r,r"(i32 %277) #2, !dbg !52
  %286 = bitcast <2 x half> %194 to i32, !dbg !52
  %287 = bitcast <2 x half> %195 to i32, !dbg !52
  %288 = bitcast <2 x half> %196 to i32, !dbg !52
  %289 = bitcast <2 x half> %197 to i32, !dbg !52
  %290 = bitcast <2 x half> %198 to i32, !dbg !52
  %291 = bitcast <2 x half> %199 to i32, !dbg !52
  %292 = bitcast <2 x half> %200 to i32, !dbg !52
  %293 = bitcast <2 x half> %201 to i32, !dbg !52
  %294 = bitcast <2 x half> %202 to i32, !dbg !52
  %295 = bitcast <2 x half> %203 to i32, !dbg !52
  %296 = bitcast <2 x half> %204 to i32, !dbg !52
  %297 = bitcast <2 x half> %205 to i32, !dbg !52
  %298 = bitcast <2 x half> %206 to i32, !dbg !52
  %299 = bitcast <2 x half> %207 to i32, !dbg !52
  %300 = bitcast <2 x half> %208 to i32, !dbg !52
  %301 = bitcast <2 x half> %209 to i32, !dbg !52
  %302 = bitcast <2 x half> %210 to i32, !dbg !52
  %303 = bitcast <2 x half> %211 to i32, !dbg !52
  %304 = bitcast <2 x half> %212 to i32, !dbg !52
  %305 = bitcast <2 x half> %213 to i32, !dbg !52
  %306 = bitcast <2 x half> %214 to i32, !dbg !52
  %307 = bitcast <2 x half> %215 to i32, !dbg !52
  %308 = bitcast <2 x half> %216 to i32, !dbg !52
  %309 = bitcast <2 x half> %217 to i32, !dbg !52
  %310 = bitcast <2 x half> %218 to i32, !dbg !52
  %311 = bitcast <2 x half> %219 to i32, !dbg !52
  %312 = bitcast <2 x half> %220 to i32, !dbg !52
  %313 = bitcast <2 x half> %221 to i32, !dbg !52
  %314 = bitcast <2 x half> %222 to i32, !dbg !52
  %315 = bitcast <2 x half> %223 to i32, !dbg !52
  %316 = bitcast <2 x half> %224 to i32, !dbg !52
  %317 = bitcast <2 x half> %225 to i32, !dbg !52
  %318 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %161, float %162, float %163, float %164, i32 %286, i32 %287, i32 %288, i32 %289, i32 %302, i32 %303) #2, !dbg !52
  %319 = extractvalue { float, float, float, float } %318, 0, !dbg !52
  %320 = extractvalue { float, float, float, float } %318, 1, !dbg !52
  %321 = extractvalue { float, float, float, float } %318, 2, !dbg !52
  %322 = extractvalue { float, float, float, float } %318, 3, !dbg !52
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %165, float %166, float %167, float %168, i32 %286, i32 %287, i32 %288, i32 %289, i32 %306, i32 %307) #2, !dbg !52
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !52
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !52
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !52
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !52
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %169, float %170, float %171, float %172, i32 %286, i32 %287, i32 %288, i32 %289, i32 %310, i32 %311) #2, !dbg !52
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !52
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !52
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !52
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !52
  %333 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %173, float %174, float %175, float %176, i32 %286, i32 %287, i32 %288, i32 %289, i32 %314, i32 %315) #2, !dbg !52
  %334 = extractvalue { float, float, float, float } %333, 0, !dbg !52
  %335 = extractvalue { float, float, float, float } %333, 1, !dbg !52
  %336 = extractvalue { float, float, float, float } %333, 2, !dbg !52
  %337 = extractvalue { float, float, float, float } %333, 3, !dbg !52
  %338 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %177, float %178, float %179, float %180, i32 %294, i32 %295, i32 %296, i32 %297, i32 %302, i32 %303) #2, !dbg !52
  %339 = extractvalue { float, float, float, float } %338, 0, !dbg !52
  %340 = extractvalue { float, float, float, float } %338, 1, !dbg !52
  %341 = extractvalue { float, float, float, float } %338, 2, !dbg !52
  %342 = extractvalue { float, float, float, float } %338, 3, !dbg !52
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %181, float %182, float %183, float %184, i32 %294, i32 %295, i32 %296, i32 %297, i32 %306, i32 %307) #2, !dbg !52
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !52
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !52
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !52
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !52
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %185, float %186, float %187, float %188, i32 %294, i32 %295, i32 %296, i32 %297, i32 %310, i32 %311) #2, !dbg !52
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !52
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !52
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !52
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !52
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %189, float %190, float %191, float %192, i32 %294, i32 %295, i32 %296, i32 %297, i32 %314, i32 %315) #2, !dbg !52
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !52
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !52
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !52
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !52
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %319, float %320, float %321, float %322, i32 %290, i32 %291, i32 %292, i32 %293, i32 %304, i32 %305) #2, !dbg !52
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !52
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !52
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !52
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !52
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %290, i32 %291, i32 %292, i32 %293, i32 %308, i32 %309) #2, !dbg !52
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !52
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !52
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !52
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !52
  %368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %290, i32 %291, i32 %292, i32 %293, i32 %312, i32 %313) #2, !dbg !52
  %369 = extractvalue { float, float, float, float } %368, 0, !dbg !52
  %370 = extractvalue { float, float, float, float } %368, 1, !dbg !52
  %371 = extractvalue { float, float, float, float } %368, 2, !dbg !52
  %372 = extractvalue { float, float, float, float } %368, 3, !dbg !52
  %373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %334, float %335, float %336, float %337, i32 %290, i32 %291, i32 %292, i32 %293, i32 %316, i32 %317) #2, !dbg !52
  %374 = extractvalue { float, float, float, float } %373, 0, !dbg !52
  %375 = extractvalue { float, float, float, float } %373, 1, !dbg !52
  %376 = extractvalue { float, float, float, float } %373, 2, !dbg !52
  %377 = extractvalue { float, float, float, float } %373, 3, !dbg !52
  %378 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %339, float %340, float %341, float %342, i32 %298, i32 %299, i32 %300, i32 %301, i32 %304, i32 %305) #2, !dbg !52
  %379 = extractvalue { float, float, float, float } %378, 0, !dbg !52
  %380 = extractvalue { float, float, float, float } %378, 1, !dbg !52
  %381 = extractvalue { float, float, float, float } %378, 2, !dbg !52
  %382 = extractvalue { float, float, float, float } %378, 3, !dbg !52
  %383 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %298, i32 %299, i32 %300, i32 %301, i32 %308, i32 %309) #2, !dbg !52
  %384 = extractvalue { float, float, float, float } %383, 0, !dbg !52
  %385 = extractvalue { float, float, float, float } %383, 1, !dbg !52
  %386 = extractvalue { float, float, float, float } %383, 2, !dbg !52
  %387 = extractvalue { float, float, float, float } %383, 3, !dbg !52
  %388 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %298, i32 %299, i32 %300, i32 %301, i32 %312, i32 %313) #2, !dbg !52
  %389 = extractvalue { float, float, float, float } %388, 0, !dbg !52
  %390 = extractvalue { float, float, float, float } %388, 1, !dbg !52
  %391 = extractvalue { float, float, float, float } %388, 2, !dbg !52
  %392 = extractvalue { float, float, float, float } %388, 3, !dbg !52
  %393 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.f16.f16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %298, i32 %299, i32 %300, i32 %301, i32 %316, i32 %317) #2, !dbg !52
  %394 = extractvalue { float, float, float, float } %393, 0, !dbg !52
  %395 = extractvalue { float, float, float, float } %393, 1, !dbg !52
  %396 = extractvalue { float, float, float, float } %393, 2, !dbg !52
  %397 = extractvalue { float, float, float, float } %393, 3, !dbg !52
  %398 = add nuw nsw i32 %193, 1, !dbg !45
  %exitcond.not = icmp eq i32 %398, %52, !dbg !45
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %158, !dbg !45

._crit_edge.loopexit:                             ; preds = %158
  %399 = insertelement <32 x float> poison, float %359, i64 0, !dbg !53
  %400 = insertelement <32 x float> %399, float %360, i64 1, !dbg !53
  %401 = insertelement <32 x float> %400, float %361, i64 2, !dbg !53
  %402 = insertelement <32 x float> %401, float %362, i64 3, !dbg !53
  %403 = insertelement <32 x float> %402, float %364, i64 4, !dbg !53
  %404 = insertelement <32 x float> %403, float %365, i64 5, !dbg !53
  %405 = insertelement <32 x float> %404, float %366, i64 6, !dbg !53
  %406 = insertelement <32 x float> %405, float %367, i64 7, !dbg !53
  %407 = insertelement <32 x float> %406, float %369, i64 8, !dbg !53
  %408 = insertelement <32 x float> %407, float %370, i64 9, !dbg !53
  %409 = insertelement <32 x float> %408, float %371, i64 10, !dbg !53
  %410 = insertelement <32 x float> %409, float %372, i64 11, !dbg !53
  %411 = insertelement <32 x float> %410, float %374, i64 12, !dbg !53
  %412 = insertelement <32 x float> %411, float %375, i64 13, !dbg !53
  %413 = insertelement <32 x float> %412, float %376, i64 14, !dbg !53
  %414 = insertelement <32 x float> %413, float %377, i64 15, !dbg !53
  %415 = insertelement <32 x float> %414, float %379, i64 16, !dbg !53
  %416 = insertelement <32 x float> %415, float %380, i64 17, !dbg !53
  %417 = insertelement <32 x float> %416, float %381, i64 18, !dbg !53
  %418 = insertelement <32 x float> %417, float %382, i64 19, !dbg !53
  %419 = insertelement <32 x float> %418, float %384, i64 20, !dbg !53
  %420 = insertelement <32 x float> %419, float %385, i64 21, !dbg !53
  %421 = insertelement <32 x float> %420, float %386, i64 22, !dbg !53
  %422 = insertelement <32 x float> %421, float %387, i64 23, !dbg !53
  %423 = insertelement <32 x float> %422, float %389, i64 24, !dbg !53
  %424 = insertelement <32 x float> %423, float %390, i64 25, !dbg !53
  %425 = insertelement <32 x float> %424, float %391, i64 26, !dbg !53
  %426 = insertelement <32 x float> %425, float %392, i64 27, !dbg !53
  %427 = insertelement <32 x float> %426, float %394, i64 28, !dbg !53
  %428 = insertelement <32 x float> %427, float %395, i64 29, !dbg !53
  %429 = insertelement <32 x float> %428, float %396, i64 30, !dbg !53
  %430 = insertelement <32 x float> %429, float %397, i64 31, !dbg !53
  %431 = fptrunc <32 x float> %430 to <32 x half>, !dbg !53
  %432 = bitcast <32 x half> %431 to <32 x i16>, !dbg !54
  br label %._crit_edge, !dbg !55

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %433 = phi <32 x i16> [ zeroinitializer, %10 ], [ %432, %._crit_edge.loopexit ]
  %434 = shl i32 %26, 3, !dbg !55
  %435 = and i32 %434, 56, !dbg !55
  %436 = or disjoint i32 %32, %435, !dbg !33
  %437 = and i32 %99, 7, !dbg !29
  %438 = or disjoint i32 %437, %25, !dbg !30
  %439 = or disjoint i32 %438, 24, !dbg !30
  %440 = or disjoint i32 %438, 16, !dbg !30
  %441 = or disjoint i32 %438, 8, !dbg !30
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %442 = mul i32 %438, %8, !dbg !56
  %443 = mul i32 %441, %8, !dbg !56
  %444 = mul i32 %440, %8, !dbg !56
  %445 = mul i32 %439, %8, !dbg !56
  %446 = sext i32 %442 to i64, !dbg !57
  %447 = getelementptr half, ptr addrspace(1) %2, i64 %446, !dbg !57
  %448 = sext i32 %443 to i64, !dbg !57
  %449 = getelementptr half, ptr addrspace(1) %2, i64 %448, !dbg !57
  %450 = sext i32 %444 to i64, !dbg !57
  %451 = getelementptr half, ptr addrspace(1) %2, i64 %450, !dbg !57
  %452 = sext i32 %445 to i64, !dbg !57
  %453 = getelementptr half, ptr addrspace(1) %2, i64 %452, !dbg !57
  %454 = sext i32 %436 to i64, !dbg !58
  %455 = getelementptr half, ptr addrspace(1) %447, i64 %454, !dbg !58
  %456 = getelementptr half, ptr addrspace(1) %449, i64 %454, !dbg !58
  %457 = getelementptr half, ptr addrspace(1) %451, i64 %454, !dbg !58
  %458 = getelementptr half, ptr addrspace(1) %453, i64 %454, !dbg !58
  %459 = icmp slt i32 %438, %3, !dbg !59
  %460 = icmp slt i32 %441, %3, !dbg !59
  %461 = icmp slt i32 %440, %3, !dbg !59
  %462 = icmp slt i32 %439, %3, !dbg !59
  %463 = icmp slt i32 %436, %4, !dbg !60
  %464 = and i1 %459, %463, !dbg !61
  %465 = and i1 %460, %463, !dbg !61
  %466 = and i1 %461, %463, !dbg !61
  %467 = and i1 %462, %463, !dbg !61
  %468 = shl i32 %26, 1, !dbg !54
  %469 = and i32 %468, 6, !dbg !54
  %470 = and i32 %38, 64, !dbg !54
  %471 = or disjoint i32 %469, %470, !dbg !54
  %472 = shl nuw nsw i32 %27, 4, !dbg !54
  %473 = or disjoint i32 %471, %472, !dbg !54
  %474 = and i32 %38, 256, !dbg !54
  %475 = or disjoint i32 %473, %474, !dbg !54
  %476 = lshr i32 %26, 2, !dbg !54
  %477 = and i32 %476, 8, !dbg !54
  %478 = or disjoint i32 %475, %477, !dbg !54
  %479 = and i32 %434, 504, !dbg !54
  %480 = lshr i32 %475, 3, !dbg !54
  %481 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %480, !dbg !54
  %482 = getelementptr inbounds half, ptr addrspace(3) %481, i32 %478, !dbg !54
  %483 = extractelement <32 x i16> %433, i64 0, !dbg !54
  %484 = extractelement <32 x i16> %433, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %482, i16 %483, i16 %484, i1 true) #2, !dbg !54
  %485 = or disjoint i32 %478, 512, !dbg !54
  %486 = lshr i32 %485, 3, !dbg !54
  %487 = and i32 %486, 536870904, !dbg !54
  %488 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %487, !dbg !54
  %489 = getelementptr inbounds half, ptr addrspace(3) %488, i32 %485, !dbg !54
  %490 = extractelement <32 x i16> %433, i64 2, !dbg !54
  %491 = extractelement <32 x i16> %433, i64 3, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %489, i16 %490, i16 %491, i1 true) #2, !dbg !54
  %492 = or disjoint i32 %478, 16, !dbg !54
  %493 = getelementptr inbounds half, ptr addrspace(3) %481, i32 %492, !dbg !54
  %494 = extractelement <32 x i16> %433, i64 4, !dbg !54
  %495 = extractelement <32 x i16> %433, i64 5, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %493, i16 %494, i16 %495, i1 true) #2, !dbg !54
  %496 = or disjoint i32 %478, 528, !dbg !54
  %497 = lshr i32 %496, 3, !dbg !54
  %498 = and i32 %497, 536870904, !dbg !54
  %499 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %498, !dbg !54
  %500 = getelementptr inbounds half, ptr addrspace(3) %499, i32 %496, !dbg !54
  %501 = extractelement <32 x i16> %433, i64 6, !dbg !54
  %502 = extractelement <32 x i16> %433, i64 7, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %500, i16 %501, i16 %502, i1 true) #2, !dbg !54
  %503 = or disjoint i32 %478, 32, !dbg !54
  %504 = getelementptr inbounds half, ptr addrspace(3) %481, i32 %503, !dbg !54
  %505 = extractelement <32 x i16> %433, i64 8, !dbg !54
  %506 = extractelement <32 x i16> %433, i64 9, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %504, i16 %505, i16 %506, i1 true) #2, !dbg !54
  %507 = or disjoint i32 %478, 544, !dbg !54
  %508 = lshr i32 %507, 3, !dbg !54
  %509 = and i32 %508, 536870904, !dbg !54
  %510 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %509, !dbg !54
  %511 = getelementptr inbounds half, ptr addrspace(3) %510, i32 %507, !dbg !54
  %512 = extractelement <32 x i16> %433, i64 10, !dbg !54
  %513 = extractelement <32 x i16> %433, i64 11, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %511, i16 %512, i16 %513, i1 true) #2, !dbg !54
  %514 = or disjoint i32 %478, 48, !dbg !54
  %515 = getelementptr inbounds half, ptr addrspace(3) %481, i32 %514, !dbg !54
  %516 = extractelement <32 x i16> %433, i64 12, !dbg !54
  %517 = extractelement <32 x i16> %433, i64 13, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %515, i16 %516, i16 %517, i1 true) #2, !dbg !54
  %518 = or disjoint i32 %478, 560, !dbg !54
  %519 = lshr i32 %518, 3, !dbg !54
  %520 = and i32 %519, 536870904, !dbg !54
  %521 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %520, !dbg !54
  %522 = getelementptr inbounds half, ptr addrspace(3) %521, i32 %518, !dbg !54
  %523 = extractelement <32 x i16> %433, i64 14, !dbg !54
  %524 = extractelement <32 x i16> %433, i64 15, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %522, i16 %523, i16 %524, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %525 = and i32 %26, 56, !dbg !54
  %526 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %525, !dbg !54
  %527 = getelementptr inbounds half, ptr addrspace(3) %526, i32 %479, !dbg !54
  %528 = load <4 x i32>, ptr addrspace(3) %527, align 16, !dbg !54
  %529 = or disjoint i32 %479, 512, !dbg !54
  %530 = lshr exact i32 %529, 3, !dbg !54
  %531 = and i32 %530, 120, !dbg !54
  %532 = getelementptr inbounds half, ptr addrspace(3) @global_smem, i32 %531, !dbg !54
  %533 = getelementptr inbounds half, ptr addrspace(3) %532, i32 %529, !dbg !54
  %534 = load <4 x i32>, ptr addrspace(3) %533, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %535 = extractelement <32 x i16> %433, i64 16, !dbg !54
  %536 = extractelement <32 x i16> %433, i64 17, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %482, i16 %535, i16 %536, i1 true) #2, !dbg !54
  %537 = extractelement <32 x i16> %433, i64 18, !dbg !54
  %538 = extractelement <32 x i16> %433, i64 19, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %489, i16 %537, i16 %538, i1 true) #2, !dbg !54
  %539 = extractelement <32 x i16> %433, i64 20, !dbg !54
  %540 = extractelement <32 x i16> %433, i64 21, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %493, i16 %539, i16 %540, i1 true) #2, !dbg !54
  %541 = extractelement <32 x i16> %433, i64 22, !dbg !54
  %542 = extractelement <32 x i16> %433, i64 23, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %500, i16 %541, i16 %542, i1 true) #2, !dbg !54
  %543 = extractelement <32 x i16> %433, i64 24, !dbg !54
  %544 = extractelement <32 x i16> %433, i64 25, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %504, i16 %543, i16 %544, i1 true) #2, !dbg !54
  %545 = extractelement <32 x i16> %433, i64 26, !dbg !54
  %546 = extractelement <32 x i16> %433, i64 27, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %511, i16 %545, i16 %546, i1 true) #2, !dbg !54
  %547 = extractelement <32 x i16> %433, i64 28, !dbg !54
  %548 = extractelement <32 x i16> %433, i64 29, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %515, i16 %547, i16 %548, i1 true) #2, !dbg !54
  %549 = extractelement <32 x i16> %433, i64 30, !dbg !54
  %550 = extractelement <32 x i16> %433, i64 31, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b16 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %522, i16 %549, i16 %550, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %551 = load <4 x i32>, ptr addrspace(3) %527, align 16, !dbg !54
  %552 = load <4 x i32>, ptr addrspace(3) %533, align 16, !dbg !54
  %.extract = extractelement <4 x i32> %528, i64 0, !dbg !54
  %.extract275 = extractelement <4 x i32> %528, i64 1, !dbg !54
  %.extract277 = extractelement <4 x i32> %528, i64 2, !dbg !54
  %.extract279 = extractelement <4 x i32> %528, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract275, i32 %.extract277, i32 %.extract279, ptr addrspace(1) %455, i1 %464) #2, !dbg !54
  %.extract281 = extractelement <4 x i32> %534, i64 0, !dbg !54
  %.extract283 = extractelement <4 x i32> %534, i64 1, !dbg !54
  %.extract285 = extractelement <4 x i32> %534, i64 2, !dbg !54
  %.extract287 = extractelement <4 x i32> %534, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract281, i32 %.extract283, i32 %.extract285, i32 %.extract287, ptr addrspace(1) %456, i1 %465) #2, !dbg !54
  %.extract289 = extractelement <4 x i32> %551, i64 0, !dbg !54
  %.extract291 = extractelement <4 x i32> %551, i64 1, !dbg !54
  %.extract293 = extractelement <4 x i32> %551, i64 2, !dbg !54
  %.extract295 = extractelement <4 x i32> %551, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract289, i32 %.extract291, i32 %.extract293, i32 %.extract295, ptr addrspace(1) %457, i1 %466) #2, !dbg !54
  %.extract297 = extractelement <4 x i32> %552, i64 0, !dbg !54
  %.extract299 = extractelement <4 x i32> %552, i64 1, !dbg !54
  %.extract301 = extractelement <4 x i32> %552, i64 2, !dbg !54
  %.extract303 = extractelement <4 x i32> %552, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract297, i32 %.extract299, i32 %.extract301, i32 %.extract303, ptr addrspace(1) %458, i1 %467) #2, !dbg !54
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "matmul.py", directory: "/home/zhouxulin/intern/AI-Benchmark/examples/matmul")
!4 = !{ptr @matmul_kernel, !"kernel", i32 1}
!5 = !{ptr @matmul_kernel, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "matmul_kernel", linkageName: "matmul_kernel", scope: !3, file: !3, line: 242, type: !8, scopeLine: 242, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 265, column: 24, scope: !7)
!11 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !14)
!12 = distinct !DILexicalBlockFile(scope: !7, file: !13, discriminator: 0)
!13 = !DIFile(filename: "standard.py", directory: "/home/zhouxulin/intern/triton/python/triton/language")
!14 = !DILocation(line: 266, column: 27, scope: !7)
!15 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !14)
!16 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !17)
!17 = !DILocation(line: 267, column: 27, scope: !7)
!18 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !17)
!19 = !DILocation(line: 268, column: 38, scope: !7)
!20 = !DILocation(line: 269, column: 22, scope: !7)
!21 = !DILocation(line: 270, column: 29, scope: !7)
!22 = !DILocation(line: 271, column: 35, scope: !7)
!23 = !DILocation(line: 271, column: 48, scope: !7)
!24 = !DILocation(line: 272, column: 34, scope: !7)
!25 = !DILocation(line: 273, column: 40, scope: !7)
!26 = !DILocation(line: 272, column: 54, scope: !7)
!27 = !DILocation(line: 272, column: 27, scope: !7)
!28 = !DILocation(line: 282, column: 23, scope: !7)
!29 = !DILocation(line: 282, column: 51, scope: !7)
!30 = !DILocation(line: 282, column: 38, scope: !7)
!31 = !DILocation(line: 282, column: 68, scope: !7)
!32 = !DILocation(line: 283, column: 23, scope: !7)
!33 = !DILocation(line: 283, column: 38, scope: !7)
!34 = !DILocation(line: 283, column: 68, scope: !7)
!35 = !DILocation(line: 285, column: 41, scope: !7)
!36 = !DILocation(line: 285, column: 60, scope: !7)
!37 = !DILocation(line: 285, column: 53, scope: !7)
!38 = !DILocation(line: 285, column: 22, scope: !7)
!39 = !DILocation(line: 286, column: 71, scope: !7)
!40 = !DILocation(line: 286, column: 52, scope: !7)
!41 = !DILocation(line: 286, column: 22, scope: !7)
!42 = !DILocation(line: 40, column: 22, scope: !12, inlinedAt: !43)
!43 = !DILocation(line: 294, column: 33, scope: !7)
!44 = !DILocation(line: 40, column: 28, scope: !12, inlinedAt: !43)
!45 = !DILocation(line: 294, column: 22, scope: !7)
!46 = !DILocation(line: 297, column: 51, scope: !7)
!47 = !DILocation(line: 297, column: 20, scope: !7)
!48 = !DILocation(line: 298, column: 20, scope: !7)
!49 = !DILocation(line: 302, column: 18, scope: !7)
!50 = !DILocation(line: 303, column: 18, scope: !7)
!51 = !DILocation(line: 297, column: 55, scope: !7)
!52 = !DILocation(line: 300, column: 35, scope: !7)
!53 = !DILocation(line: 308, column: 23, scope: !7)
!54 = !DILocation(line: 316, column: 21, scope: !7)
!55 = !DILocation(line: 283, column: 51, scope: !7)
!56 = !DILocation(line: 314, column: 33, scope: !7)
!57 = !DILocation(line: 314, column: 21, scope: !7)
!58 = !DILocation(line: 314, column: 52, scope: !7)
!59 = !DILocation(line: 315, column: 33, scope: !7)
!60 = !DILocation(line: 315, column: 58, scope: !7)
!61 = !DILocation(line: 315, column: 39, scope: !7)
!62 = !DILocation(line: 316, column: 4, scope: !7)
