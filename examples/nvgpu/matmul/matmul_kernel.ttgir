// Generated from running python/tutorials/03-matrix-multiplication.py in triton repository.

#blocked = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 16], threadsPerWarp = [16, 2], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 2], instrShape = [16, 8]}>
#shared = #ttg.shared<{vec = 16, perPhase = 4, maxPhase = 2, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 16, perPhase = 4, maxPhase = 2, order = [0, 1], hasLeadingOffset = false}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg1: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":242:0)) attributes {noinline = false} {
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32x32xi32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf8E5M2, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x64xf8E5M2, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<32x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c31_i32 : i32 loc(#loc56)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc57)
    %3 = arith.addi %arg4, %c63_i32 : i32 loc(#loc58)
    %4 = arith.divsi %3, %c64_i32 : i32 loc(#loc59)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %5 : i32 loc(#loc12)
    %11 = arith.remsi %10, %9 : i32 loc(#loc13)
    %12 = arith.addi %7, %11 : i32 loc(#loc14)
    %13 = arith.divsi %10, %9 : i32 loc(#loc15)
    %14 = arith.muli %12, %c32_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc17)
    %16 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc17)
    %17 = tt.splat %14 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %18 = tt.splat %14 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %19 = arith.addi %17, %15 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %20 = arith.addi %18, %16 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc18)
    %21 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %22 = arith.remsi %19, %21 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %23 = arith.muli %13, %c64_i32 : i32 loc(#loc20)
    %24 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc21)
    %26 = tt.splat %23 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %27 = tt.splat %23 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %28 = arith.addi %26, %24 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %29 = arith.addi %27, %25 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %30 = tt.splat %arg4 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %31 = arith.remsi %28, %30 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %32 = tt.expand_dims %22 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc24)
    %33 = tt.splat %arg6 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc25)
    %34 = arith.muli %32, %33 : tensor<32x1xi32, #blocked1> loc(#loc25)
    %35 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc26)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc26)
    %37 = tt.broadcast %34 : tensor<32x1xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc27)
    %38 = tt.broadcast %36 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc27)
    %39 = arith.addi %37, %38 : tensor<32x32xi32, #blocked1> loc(#loc27)
    %40 = tt.splat %arg0 : !tt.ptr<f8E5M2> -> tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> loc(#loc28)
    %41 = tt.addptr %40, %39 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc28)
    %42 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc29)
    %44 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc30)
    %45 = tt.splat %arg7 : i32 -> tensor<1x64xi32, #blocked> loc(#loc31)
    %46 = arith.muli %44, %45 : tensor<1x64xi32, #blocked> loc(#loc31)
    %47 = tt.broadcast %43 : tensor<32x1xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc32)
    %48 = tt.broadcast %46 : tensor<1x64xi32, #blocked> -> tensor<32x64xi32, #blocked> loc(#loc32)
    %49 = arith.addi %47, %48 : tensor<32x64xi32, #blocked> loc(#loc32)
    %50 = tt.splat %arg1 : !tt.ptr<f8E5M2> -> tensor<32x64x!tt.ptr<f8E5M2>, #blocked> loc(#loc33)
    %51 = tt.addptr %50, %49 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc33)
    %52 = arith.addi %arg5, %c31_i32 : i32 loc(#loc60)
    %53 = arith.divsi %52, %c32_i32 : i32 loc(#loc61)
    %54 = ttg.local_alloc  : () -> !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %55 = ttg.local_alloc  : () -> !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %56 = arith.cmpi sgt, %53, %c0_i32 : i32 loc(#loc37)
    %57 = tt.splat %arg5 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc38)
    %58 = arith.cmpi slt, %36, %57 : tensor<1x32xi32, #blocked1> loc(#loc38)
    %59 = tt.broadcast %58 : tensor<1x32xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc35)
    %60 = ttg.memdesc_subview %54[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %61 = tt.splat %56 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %62 = arith.andi %61, %59 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %63 = ttg.async_copy_global_to_local %41, %60 mask %62 other %cst_1 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %64 = ttg.async_commit_group %63 loc(#loc35)
    %65 = tt.splat %arg5 : i32 -> tensor<32x1xi32, #blocked> loc(#loc39)
    %66 = arith.cmpi slt, %43, %65 : tensor<32x1xi32, #blocked> loc(#loc39)
    %67 = tt.broadcast %66 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc36)
    %68 = ttg.memdesc_subview %55[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %69 = tt.splat %56 : i1 -> tensor<32x64xi1, #blocked> loc(#loc37)
    %70 = arith.andi %69, %67 : tensor<32x64xi1, #blocked> loc(#loc37)
    %71 = ttg.async_copy_global_to_local %51, %68 mask %70 other %cst_2 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked> -> <32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %72 = ttg.async_commit_group %71 loc(#loc36)
    %73 = arith.cmpi sgt, %53, %c1_i32 : i32 loc(#loc37)
    %74 = tt.addptr %41, %cst_0 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc40)
    %75 = tt.addptr %51, %cst : tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc41)
    %76 = arith.subi %arg5, %c32_i32 : i32 loc(#loc42)
    %77 = tt.splat %76 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc38)
    %78 = arith.cmpi slt, %36, %77 : tensor<1x32xi32, #blocked1> loc(#loc38)
    %79 = tt.broadcast %78 : tensor<1x32xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc35)
    %80 = ttg.memdesc_subview %54[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %81 = tt.splat %73 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %82 = arith.andi %81, %79 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %83 = ttg.async_copy_global_to_local %74, %80 mask %82 other %cst_1 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %84 = ttg.async_commit_group %83 loc(#loc35)
    %85 = tt.splat %76 : i32 -> tensor<32x1xi32, #blocked> loc(#loc39)
    %86 = arith.cmpi slt, %43, %85 : tensor<32x1xi32, #blocked> loc(#loc39)
    %87 = tt.broadcast %86 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc36)
    %88 = ttg.memdesc_subview %55[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %89 = tt.splat %73 : i1 -> tensor<32x64xi1, #blocked> loc(#loc37)
    %90 = arith.andi %89, %87 : tensor<32x64xi1, #blocked> loc(#loc37)
    %91 = ttg.async_copy_global_to_local %75, %88 mask %90 other %cst_2 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked> -> <32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %92 = ttg.async_commit_group %91 loc(#loc36)
    %93 = arith.cmpi sgt, %53, %c2_i32 : i32 loc(#loc37)
    %94 = tt.addptr %74, %cst_0 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc40)
    %95 = tt.addptr %75, %cst : tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc41)
    %96 = arith.subi %arg5, %c64_i32 : i32 loc(#loc42)
    %97 = tt.splat %96 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc38)
    %98 = arith.cmpi slt, %36, %97 : tensor<1x32xi32, #blocked1> loc(#loc38)
    %99 = tt.broadcast %98 : tensor<1x32xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc35)
    %100 = ttg.memdesc_subview %54[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %101 = tt.splat %93 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %102 = arith.andi %101, %99 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %103 = ttg.async_copy_global_to_local %94, %100 mask %102 other %cst_1 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %104 = ttg.async_commit_group %103 loc(#loc35)
    %105 = tt.splat %96 : i32 -> tensor<32x1xi32, #blocked> loc(#loc39)
    %106 = arith.cmpi slt, %43, %105 : tensor<32x1xi32, #blocked> loc(#loc39)
    %107 = tt.broadcast %106 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc36)
    %108 = ttg.memdesc_subview %55[%c2_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %109 = tt.splat %93 : i1 -> tensor<32x64xi1, #blocked> loc(#loc37)
    %110 = arith.andi %109, %107 : tensor<32x64xi1, #blocked> loc(#loc37)
    %111 = ttg.async_copy_global_to_local %95, %108 mask %110 other %cst_2 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked> -> <32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %112 = ttg.async_commit_group %111 loc(#loc36)
    %113 = arith.cmpi sgt, %53, %c3_i32 : i32 loc(#loc37)
    %114 = tt.addptr %94, %cst_0 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc40)
    %115 = tt.addptr %95, %cst : tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc41)
    %116 = arith.subi %arg5, %c96_i32 : i32 loc(#loc42)
    %117 = tt.splat %116 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc38)
    %118 = arith.cmpi slt, %36, %117 : tensor<1x32xi32, #blocked1> loc(#loc38)
    %119 = tt.broadcast %118 : tensor<1x32xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc35)
    %120 = ttg.memdesc_subview %54[%c3_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %121 = tt.splat %113 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
    %122 = arith.andi %121, %119 : tensor<32x32xi1, #blocked1> loc(#loc37)
    %123 = ttg.async_copy_global_to_local %114, %120 mask %122 other %cst_1 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
    %124 = ttg.async_commit_group %123 loc(#loc35)
    %125 = tt.splat %116 : i32 -> tensor<32x1xi32, #blocked> loc(#loc39)
    %126 = arith.cmpi slt, %43, %125 : tensor<32x1xi32, #blocked> loc(#loc39)
    %127 = tt.broadcast %126 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc36)
    %128 = ttg.memdesc_subview %55[%c3_i32, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %129 = tt.splat %113 : i1 -> tensor<32x64xi1, #blocked> loc(#loc37)
    %130 = arith.andi %129, %127 : tensor<32x64xi1, #blocked> loc(#loc37)
    %131 = ttg.async_copy_global_to_local %115, %128 mask %130 other %cst_2 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked> -> <32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
    %132 = ttg.async_commit_group %131 loc(#loc36)
    %133 = ttg.async_wait %72 {num = 6 : i32} loc(#loc35)
    %134 = ttg.memdesc_subview %60[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory> loc(#loc35)
    %135 = ttg.local_load %134 : !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory> -> tensor<32x32xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc35)
    %136 = tt.fp_to_fp %135 : tensor<32x32xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> -> tensor<32x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc43)
    %137 = ttg.memdesc_subview %68[%c0_i32, %c0_i32] : !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory> loc(#loc36)
    %138 = ttg.local_load %137 : !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory> -> tensor<32x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc36)
    %139 = tt.fp_to_fp %138 : tensor<32x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<32x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc43)
    %140:10 = scf.for %arg9 = %c0_i32 to %53 step %c1_i32 iter_args(%arg10 = %cst_3, %arg11 = %114, %arg12 = %115, %arg13 = %c3_i32, %arg14 = %c0_i32, %arg15 = %92, %arg16 = %112, %arg17 = %132, %arg18 = %136, %arg19 = %139) -> (tensor<32x64xf32, #mma>, tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<32x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>>, tensor<32x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>)  : i32 {
      %160 = arith.subi %53, %c4_i32 : i32 loc(#loc37)
      %161 = arith.cmpi slt, %arg9, %160 : i32 loc(#loc37)
      %162 = tt.addptr %arg11, %cst_0 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc40)
      %163 = tt.addptr %arg12, %cst : tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, tensor<32x64xi32, #blocked> loc(#loc41)
      %164 = arith.addi %arg13, %c1_i32 : i32 loc(#loc37)
      %165 = arith.cmpi slt, %164, %c4_i32 : i32 loc(#loc37)
      %166 = arith.select %165, %164, %c0_i32 : i32 loc(#loc37)
      %167 = arith.addi %arg9, %c4_i32 : i32 loc(#loc37)
      %168 = arith.muli %167, %c32_i32 : i32 loc(#loc44)
      %169 = arith.subi %arg5, %168 : i32 loc(#loc42)
      %170 = tt.splat %169 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc38)
      %171 = arith.cmpi slt, %36, %170 : tensor<1x32xi32, #blocked1> loc(#loc38)
      %172 = tt.broadcast %171 : tensor<1x32xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc35)
      %173 = ttg.memdesc_subview %54[%166, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
      %174 = tt.splat %161 : i1 -> tensor<32x32xi1, #blocked1> loc(#loc37)
      %175 = arith.andi %174, %172 : tensor<32x32xi1, #blocked1> loc(#loc37)
      %176 = ttg.async_copy_global_to_local %162, %173 mask %175 other %cst_1 : tensor<32x32x!tt.ptr<f8E5M2>, #blocked1> -> <32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
      %177 = ttg.async_commit_group %176 loc(#loc35)
      %178 = tt.splat %169 : i32 -> tensor<32x1xi32, #blocked> loc(#loc39)
      %179 = arith.cmpi slt, %43, %178 : tensor<32x1xi32, #blocked> loc(#loc39)
      %180 = tt.broadcast %179 : tensor<32x1xi1, #blocked> -> tensor<32x64xi1, #blocked> loc(#loc36)
      %181 = ttg.memdesc_subview %55[%166, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
      %182 = tt.splat %161 : i1 -> tensor<32x64xi1, #blocked> loc(#loc37)
      %183 = arith.andi %182, %180 : tensor<32x64xi1, #blocked> loc(#loc37)
      %184 = ttg.async_copy_global_to_local %163, %181 mask %183 other %cst_2 : tensor<32x64x!tt.ptr<f8E5M2>, #blocked> -> <32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
      %185 = ttg.async_commit_group %184 loc(#loc36)
      %186 = arith.addi %arg14, %c1_i32 : i32 loc(#loc37)
      %187 = arith.cmpi slt, %186, %c4_i32 : i32 loc(#loc37)
      %188 = arith.select %187, %186, %c0_i32 : i32 loc(#loc37)
      %189 = ttg.memdesc_subview %54[%188, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc35)
      %190 = ttg.async_wait %arg15 {num = 6 : i32} loc(#loc35)
      %191 = ttg.memdesc_subview %55[%188, %c0_i32, %c0_i32] : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc36)
      %192 = ttg.memdesc_subview %189[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory> loc(#loc35)
      %193 = ttg.local_load %192 : !ttg.memdesc<32x32xf8E5M2, #shared, #ttg.shared_memory> -> tensor<32x32xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc35)
      %194 = tt.fp_to_fp %193 : tensor<32x32xf8E5M2, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> -> tensor<32x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc43)
      %195 = ttg.memdesc_subview %191[%c0_i32, %c0_i32] : !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory> loc(#loc36)
      %196 = ttg.local_load %195 : !ttg.memdesc<32x64xf8E5M2, #shared1, #ttg.shared_memory> -> tensor<32x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc36)
      %197 = tt.fp_to_fp %196 : tensor<32x64xf8E5M2, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<32x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc43)
      %198 = tt.dot %arg18, %arg19, %arg10, inputPrecision = tf32 : tensor<32x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<32x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<32x64xf32, #mma> loc(#loc43)
      scf.yield %198, %162, %163, %166, %188, %arg16, %arg17, %185, %194, %197 : tensor<32x64xf32, #mma>, tensor<32x32x!tt.ptr<f8E5M2>, #blocked1>, tensor<32x64x!tt.ptr<f8E5M2>, #blocked>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, tensor<32x32xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>>, tensor<32x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc37)
    } loc(#loc37)
    %141 = ttg.async_wait  {num = 0 : i32} loc(#loc37)
    ttg.local_dealloc %54 : !ttg.memdesc<4x32x32xf8E5M2, #shared, #ttg.shared_memory, mutable> loc(#loc37)
    ttg.local_dealloc %55 : !ttg.memdesc<4x32x64xf8E5M2, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %142 = arith.truncf %140#0 : tensor<32x64xf32, #mma> to tensor<32x64xf16, #mma> loc(#loc45)
    %143 = tt.expand_dims %20 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc46)
    %144 = tt.splat %arg8 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc47)
    %145 = arith.muli %144, %143 : tensor<32x1xi32, #blocked2> loc(#loc47)
    %146 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<32x1x!tt.ptr<f16>, #blocked2> loc(#loc48)
    %147 = tt.addptr %146, %145 : tensor<32x1x!tt.ptr<f16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc48)
    %148 = tt.expand_dims %29 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc49)
    %149 = tt.broadcast %147 : tensor<32x1x!tt.ptr<f16>, #blocked2> -> tensor<32x64x!tt.ptr<f16>, #blocked2> loc(#loc50)
    %150 = tt.broadcast %148 : tensor<1x64xi32, #blocked2> -> tensor<32x64xi32, #blocked2> loc(#loc50)
    %151 = tt.addptr %149, %150 : tensor<32x64x!tt.ptr<f16>, #blocked2>, tensor<32x64xi32, #blocked2> loc(#loc50)
    %152 = tt.splat %arg3 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc51)
    %153 = arith.cmpi slt, %143, %152 : tensor<32x1xi32, #blocked2> loc(#loc51)
    %154 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc52)
    %155 = arith.cmpi slt, %148, %154 : tensor<1x64xi32, #blocked2> loc(#loc52)
    %156 = tt.broadcast %153 : tensor<32x1xi1, #blocked2> -> tensor<32x64xi1, #blocked2> loc(#loc53)
    %157 = tt.broadcast %155 : tensor<1x64xi1, #blocked2> -> tensor<32x64xi1, #blocked2> loc(#loc53)
    %158 = arith.andi %156, %157 : tensor<32x64xi1, #blocked2> loc(#loc53)
    %159 = ttg.convert_layout %142 : tensor<32x64xf16, #mma> -> tensor<32x64xf16, #blocked2> loc(#loc54)
    tt.store %151, %159, %158 : tensor<32x64x!tt.ptr<f16>, #blocked2> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":265:24)
#loc3 = loc("/home/zhouxulin/intern/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":266:27)
#loc5 = loc("/home/zhouxulin/intern/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":267:27)
#loc7 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":268:38)
#loc8 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":269:22)
#loc9 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":270:29)
#loc10 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":271:35)
#loc11 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":271:48)
#loc12 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":272:34)
#loc13 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":272:54)
#loc14 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":272:27)
#loc15 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":273:40)
#loc16 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":282:23)
#loc17 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":282:51)
#loc18 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":282:38)
#loc19 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":282:68)
#loc20 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":283:23)
#loc21 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":283:51)
#loc22 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":283:38)
#loc23 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":283:68)
#loc24 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":285:30)
#loc25 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":285:41)
#loc26 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":285:60)
#loc27 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":285:53)
#loc28 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":285:22)
#loc29 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":286:29)
#loc30 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":286:60)
#loc31 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":286:71)
#loc32 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":286:52)
#loc33 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":286:22)
#loc34 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":294:33)
#loc35 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":297:20)
#loc36 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":298:20)
#loc37 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":294:22)
#loc38 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":297:51)
#loc39 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":298:51)
#loc40 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":302:18)
#loc41 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":303:18)
#loc42 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":297:55)
#loc43 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":300:35)
#loc44 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":297:59)
#loc45 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":308:23)
#loc46 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":314:41)
#loc47 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":314:33)
#loc48 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":314:21)
#loc49 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":314:72)
#loc50 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":314:52)
#loc51 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":315:33)
#loc52 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":315:58)
#loc53 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":315:39)
#loc54 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":316:21)
#loc55 = loc("/home/zhouxulin/intern/triton/python/tutorials/03-matrix-multiplication.py":316:4)
#loc56 = loc(callsite(#loc3 at #loc4))
#loc57 = loc(callsite(#loc5 at #loc4))
#loc58 = loc(callsite(#loc3 at #loc6))
#loc59 = loc(callsite(#loc5 at #loc6))
#loc60 = loc(callsite(#loc3 at #loc34))
#loc61 = loc(callsite(#loc5 at #loc34))
