module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.shared = 1056 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8>
  llvm.func @softmax_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32}, %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: !llvm.ptr<1>) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 256>} {
    %0 = llvm.mlir.constant(1.44269502 : f32) : f32
    %1 = llvm.mlir.undef : vector<1xi32>
    %2 = llvm.mlir.undef : vector<1xf32>
    %3 = llvm.mlir.constant(31 : i32) : i32
    %4 = llvm.mlir.constant(true) : i1
    %5 = llvm.mlir.constant(256 : i32) : i32
    %6 = llvm.mlir.addressof @global_smem : !llvm.ptr<3>
    %7 = llvm.mlir.constant(128 : i32) : i32
    %8 = llvm.mlir.constant(64 : i32) : i32
    %9 = llvm.mlir.constant(16 : i32) : i32
    %10 = llvm.mlir.constant(8 : i32) : i32
    %11 = llvm.mlir.constant(4 : i32) : i32
    %12 = llvm.mlir.constant(2 : i32) : i32
    %13 = llvm.mlir.constant(32 : i32) : i32
    %14 = llvm.mlir.constant(0 : index) : i32
    %15 = llvm.mlir.constant(1 : i32) : i32
    %16 = llvm.mlir.constant(0 : i32) : i32
    %17 = llvm.mlir.constant(-1 : i32) : i32
    %18 = llvm.mlir.constant(0xFF800000 : f32) : f32
    %19 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32
    %20 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %nctaid.x;", "=r"  : () -> i32
    %21 = nvvm.read.ptx.sreg.tid.x : i32
    %22 = llvm.urem %21, %13 : i32
    %23 = llvm.udiv %21, %13 : i32
    %24 = llvm.and %22, %15 : i32
    %25 = llvm.icmp "eq" %24, %16 : i32
    %26 = llvm.select %25, %16, %15 : i1, i32
    %27 = llvm.xor %16, %26 : i32
    %28 = llvm.and %22, %12 : i32
    %29 = llvm.icmp "eq" %28, %16 : i32
    %30 = llvm.select %29, %16, %12 : i1, i32
    %31 = llvm.xor %27, %30 : i32
    %32 = llvm.and %22, %11 : i32
    %33 = llvm.icmp "eq" %32, %16 : i32
    %34 = llvm.select %33, %16, %11 : i1, i32
    %35 = llvm.xor %31, %34 : i32
    %36 = llvm.and %22, %10 : i32
    %37 = llvm.icmp "eq" %36, %16 : i32
    %38 = llvm.select %37, %16, %10 : i1, i32
    %39 = llvm.xor %35, %38 : i32
    %40 = llvm.and %22, %9 : i32
    %41 = llvm.icmp "eq" %40, %16 : i32
    %42 = llvm.select %41, %16, %9 : i1, i32
    %43 = llvm.xor %39, %42 : i32
    %44 = llvm.and %23, %15 : i32
    %45 = llvm.icmp "eq" %44, %16 : i32
    %46 = llvm.select %45, %16, %13 : i1, i32
    %47 = llvm.xor %43, %46 : i32
    %48 = llvm.and %23, %12 : i32
    %49 = llvm.icmp "eq" %48, %16 : i32
    %50 = llvm.select %49, %16, %8 : i1, i32
    %51 = llvm.xor %47, %50 : i32
    %52 = llvm.and %23, %11 : i32
    %53 = llvm.icmp "eq" %52, %16 : i32
    %54 = llvm.select %53, %16, %7 : i1, i32
    %55 = llvm.xor %51, %54 : i32
    %56 = llvm.xor %55, %16 : i32
    %57 = llvm.add %56, %14 : i32
    %58 = llvm.icmp "slt" %57, %arg5 : i32
    %59 = llvm.icmp "slt" %19, %arg4 : i32
    %60 = llvm.mul %19, %arg2 : i32
    %61 = llvm.getelementptr %arg1[%60] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %62 = llvm.getelementptr %61[%57] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %63 = llvm.mul %16, %5 : i32
    %64 = llvm.add %63, %16 : i32
    %65 = llvm.mul %16, %15 : i32
    %66 = llvm.add %64, %65 : i32
    %67 = llvm.getelementptr %6[%66] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %68 = llvm.and %59, %58 : i1
    %69 = nvvm.read.ptx.sreg.tid.x : i32
    %70 = llvm.urem %69, %13 : i32
    %71 = llvm.udiv %69, %13 : i32
    %72 = llvm.and %70, %15 : i32
    %73 = llvm.icmp "eq" %72, %16 : i32
    %74 = llvm.select %73, %16, %15 : i1, i32
    %75 = llvm.xor %16, %74 : i32
    %76 = llvm.and %70, %12 : i32
    %77 = llvm.icmp "eq" %76, %16 : i32
    %78 = llvm.select %77, %16, %12 : i1, i32
    %79 = llvm.xor %75, %78 : i32
    %80 = llvm.and %70, %11 : i32
    %81 = llvm.icmp "eq" %80, %16 : i32
    %82 = llvm.select %81, %16, %11 : i1, i32
    %83 = llvm.xor %79, %82 : i32
    %84 = llvm.and %70, %10 : i32
    %85 = llvm.icmp "eq" %84, %16 : i32
    %86 = llvm.select %85, %16, %10 : i1, i32
    %87 = llvm.xor %83, %86 : i32
    %88 = llvm.and %70, %9 : i32
    %89 = llvm.icmp "eq" %88, %16 : i32
    %90 = llvm.select %89, %16, %9 : i1, i32
    %91 = llvm.xor %87, %90 : i32
    %92 = llvm.and %71, %15 : i32
    %93 = llvm.icmp "eq" %92, %16 : i32
    %94 = llvm.select %93, %16, %13 : i1, i32
    %95 = llvm.xor %91, %94 : i32
    %96 = llvm.and %71, %12 : i32
    %97 = llvm.icmp "eq" %96, %16 : i32
    %98 = llvm.select %97, %16, %8 : i1, i32
    %99 = llvm.xor %95, %98 : i32
    %100 = llvm.and %71, %11 : i32
    %101 = llvm.icmp "eq" %100, %16 : i32
    %102 = llvm.select %101, %16, %7 : i1, i32
    %103 = llvm.xor %99, %102 : i32
    %104 = llvm.mul %103, %15 : i32
    %105 = llvm.add %104, %16 : i32
    %106 = llvm.getelementptr inbounds %67[%105] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %107 = llvm.select %68, %11, %16 : i1, i32
    %108 = nvvm.read.ptx.sreg.tid.x : i32
    %109 = llvm.urem %108, %13 : i32
    %110 = llvm.udiv %108, %13 : i32
    %111 = llvm.and %16, %109 : i32
    %112 = llvm.icmp "eq" %111, %16 : i32
    %113 = llvm.and %4, %112 : i1
    %114 = llvm.and %16, %110 : i32
    %115 = llvm.icmp "eq" %114, %16 : i32
    %116 = llvm.and %113, %115 : i1
    %117 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b" %106, %62, %107, %116 : (!llvm.ptr<3>, !llvm.ptr<1>, i32, i1) -> !llvm.void
    %118 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "cp.async.commit_group ;", ""  : () -> !llvm.void
    llvm.br ^bb1(%19, %16, %17 : i32, i32, i32)
  ^bb1(%119: i32, %120: i32, %121: i32):  // 2 preds: ^bb0, ^bb2
    %122 = llvm.icmp "slt" %119, %arg4 : i32
    llvm.cond_br %122, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %123 = llvm.sub %arg4, %20 : i32
    %124 = llvm.icmp "slt" %119, %123 : i32
    %125 = llvm.add %121, %15 : i32
    %126 = llvm.icmp "slt" %125, %15 : i32
    %127 = llvm.select %126, %125, %16 : i1, i32
    %128 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "cp.async.wait_group 0x0;", ""  : () -> !llvm.void
    nvvm.barrier0
    %129 = llvm.mul %127, %5 : i32
    %130 = llvm.add %129, %16 : i32
    %131 = llvm.mul %16, %15 : i32
    %132 = llvm.add %130, %131 : i32
    %133 = llvm.getelementptr %6[%132] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %134 = nvvm.read.ptx.sreg.tid.x : i32
    %135 = llvm.urem %134, %13 : i32
    %136 = llvm.udiv %134, %13 : i32
    %137 = llvm.and %135, %15 : i32
    %138 = llvm.icmp "eq" %137, %16 : i32
    %139 = llvm.select %138, %16, %15 : i1, i32
    %140 = llvm.xor %16, %139 : i32
    %141 = llvm.and %135, %12 : i32
    %142 = llvm.icmp "eq" %141, %16 : i32
    %143 = llvm.select %142, %16, %12 : i1, i32
    %144 = llvm.xor %140, %143 : i32
    %145 = llvm.and %135, %11 : i32
    %146 = llvm.icmp "eq" %145, %16 : i32
    %147 = llvm.select %146, %16, %11 : i1, i32
    %148 = llvm.xor %144, %147 : i32
    %149 = llvm.and %135, %10 : i32
    %150 = llvm.icmp "eq" %149, %16 : i32
    %151 = llvm.select %150, %16, %10 : i1, i32
    %152 = llvm.xor %148, %151 : i32
    %153 = llvm.and %135, %9 : i32
    %154 = llvm.icmp "eq" %153, %16 : i32
    %155 = llvm.select %154, %16, %9 : i1, i32
    %156 = llvm.xor %152, %155 : i32
    %157 = llvm.and %136, %15 : i32
    %158 = llvm.icmp "eq" %157, %16 : i32
    %159 = llvm.select %158, %16, %13 : i1, i32
    %160 = llvm.xor %156, %159 : i32
    %161 = llvm.and %136, %12 : i32
    %162 = llvm.icmp "eq" %161, %16 : i32
    %163 = llvm.select %162, %16, %8 : i1, i32
    %164 = llvm.xor %160, %163 : i32
    %165 = llvm.and %136, %11 : i32
    %166 = llvm.icmp "eq" %165, %16 : i32
    %167 = llvm.select %166, %16, %7 : i1, i32
    %168 = llvm.xor %164, %167 : i32
    %169 = llvm.mul %168, %15 : i32
    %170 = llvm.add %169, %16 : i32
    %171 = llvm.getelementptr inbounds %133[%170] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %172 = llvm.load %171 {alignment = 4 : i64} : !llvm.ptr<3> -> vector<1xf32>
    %173 = llvm.extractelement %172[%16 : i32] : vector<1xf32>
    %174 = llvm.select %58, %173, %18 : i1, f32
    %175 = llvm.bitcast %174 : f32 to i32
    %176 = nvvm.shfl.sync  bfly %17, %175, %9, %3 : i32 -> i32
    %177 = llvm.bitcast %176 : i32 to f32
    %178 = llvm.intr.maxnum(%174, %177) : (f32, f32) -> f32
    %179 = llvm.bitcast %178 : f32 to i32
    %180 = nvvm.shfl.sync  bfly %17, %179, %10, %3 : i32 -> i32
    %181 = llvm.bitcast %180 : i32 to f32
    %182 = llvm.intr.maxnum(%178, %181) : (f32, f32) -> f32
    %183 = llvm.bitcast %182 : f32 to i32
    %184 = nvvm.shfl.sync  bfly %17, %183, %11, %3 : i32 -> i32
    %185 = llvm.bitcast %184 : i32 to f32
    %186 = llvm.intr.maxnum(%182, %185) : (f32, f32) -> f32
    %187 = llvm.bitcast %186 : f32 to i32
    %188 = nvvm.shfl.sync  bfly %17, %187, %12, %3 : i32 -> i32
    %189 = llvm.bitcast %188 : i32 to f32
    %190 = llvm.intr.maxnum(%186, %189) : (f32, f32) -> f32
    %191 = llvm.bitcast %190 : f32 to i32
    %192 = nvvm.shfl.sync  bfly %17, %191, %15, %3 : i32 -> i32
    %193 = llvm.bitcast %192 : i32 to f32
    %194 = llvm.intr.maxnum(%190, %193) : (f32, f32) -> f32
    %195 = llvm.getelementptr %6[1024] : (!llvm.ptr<3>) -> !llvm.ptr<3>, i8
    %196 = nvvm.read.ptx.sreg.tid.x : i32
    %197 = llvm.udiv %196, %13 : i32
    %198 = llvm.urem %196, %13 : i32
    %199 = llvm.urem %198, %13 : i32
    %200 = llvm.icmp "eq" %199, %16 : i32
    %201 = llvm.urem %197, %10 : i32
    %202 = llvm.getelementptr %195[%201] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %203 = llvm.insertelement %194, %2[%16 : i32] : vector<1xf32>
    %204 = llvm.extractelement %203[%16 : i32] : vector<1xf32>
    %205 = llvm.bitcast %204 : f32 to i32
    %206 = llvm.insertelement %205, %1[%16 : i32] : vector<1xi32>
    %207 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %202, %206, %200 : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void
    nvvm.barrier0
    %208 = nvvm.read.ptx.sreg.tid.x : i32
    %209 = llvm.urem %208, %13 : i32
    %210 = llvm.icmp "slt" %208, %10 : i32
    %211 = llvm.getelementptr %195[%208] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %212 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b" %211, %210 : (!llvm.ptr<3>, i1) -> i32
    %213 = llvm.insertelement %212, %1[%16 : i32] : vector<1xi32>
    %214 = llvm.extractelement %213[%16 : i32] : vector<1xi32>
    %215 = llvm.bitcast %214 : i32 to f32
    %216 = llvm.insertelement %215, %2[%16 : i32] : vector<1xf32>
    %217 = llvm.extractelement %216[%16 : i32] : vector<1xf32>
    %218 = llvm.bitcast %217 : f32 to i32
    %219 = nvvm.shfl.sync  bfly %17, %218, %11, %3 : i32 -> i32
    %220 = llvm.bitcast %219 : i32 to f32
    %221 = llvm.intr.maxnum(%217, %220) : (f32, f32) -> f32
    %222 = llvm.bitcast %221 : f32 to i32
    %223 = nvvm.shfl.sync  bfly %17, %222, %12, %3 : i32 -> i32
    %224 = llvm.bitcast %223 : i32 to f32
    %225 = llvm.intr.maxnum(%221, %224) : (f32, f32) -> f32
    %226 = llvm.bitcast %225 : f32 to i32
    %227 = nvvm.shfl.sync  bfly %17, %226, %15, %3 : i32 -> i32
    %228 = llvm.bitcast %227 : i32 to f32
    %229 = llvm.intr.maxnum(%225, %228) : (f32, f32) -> f32
    %230 = llvm.getelementptr %195[%208] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %231 = llvm.urem %209, %10 : i32
    %232 = llvm.icmp "eq" %231, %16 : i32
    %233 = llvm.and %210, %232 : i1
    %234 = llvm.insertelement %229, %2[%16 : i32] : vector<1xf32>
    %235 = llvm.extractelement %234[%16 : i32] : vector<1xf32>
    %236 = llvm.bitcast %235 : f32 to i32
    %237 = llvm.insertelement %236, %1[%16 : i32] : vector<1xi32>
    %238 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %230, %237, %233 : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void
    nvvm.barrier0
    %239 = llvm.load %195 : !llvm.ptr<3> -> f32
    %240 = llvm.fsub %174, %239 : f32
    %241 = llvm.fmul %240, %0 : f32
    %242 = llvm.inline_asm asm_dialect = att operand_attrs = [] "ex2.approx.f32 $0, $1;", "=f,f" %241 : (f32) -> f32
    nvvm.barrier0
    %243 = llvm.bitcast %242 : f32 to i32
    %244 = nvvm.shfl.sync  bfly %17, %243, %9, %3 : i32 -> i32
    %245 = llvm.bitcast %244 : i32 to f32
    %246 = llvm.fadd %242, %245 : f32
    %247 = llvm.bitcast %246 : f32 to i32
    %248 = nvvm.shfl.sync  bfly %17, %247, %10, %3 : i32 -> i32
    %249 = llvm.bitcast %248 : i32 to f32
    %250 = llvm.fadd %246, %249 : f32
    %251 = llvm.bitcast %250 : f32 to i32
    %252 = nvvm.shfl.sync  bfly %17, %251, %11, %3 : i32 -> i32
    %253 = llvm.bitcast %252 : i32 to f32
    %254 = llvm.fadd %250, %253 : f32
    %255 = llvm.bitcast %254 : f32 to i32
    %256 = nvvm.shfl.sync  bfly %17, %255, %12, %3 : i32 -> i32
    %257 = llvm.bitcast %256 : i32 to f32
    %258 = llvm.fadd %254, %257 : f32
    %259 = llvm.bitcast %258 : f32 to i32
    %260 = nvvm.shfl.sync  bfly %17, %259, %15, %3 : i32 -> i32
    %261 = llvm.bitcast %260 : i32 to f32
    %262 = llvm.fadd %258, %261 : f32
    %263 = llvm.getelementptr %6[1024] : (!llvm.ptr<3>) -> !llvm.ptr<3>, i8
    %264 = nvvm.read.ptx.sreg.tid.x : i32
    %265 = llvm.udiv %264, %13 : i32
    %266 = llvm.urem %264, %13 : i32
    %267 = llvm.urem %266, %13 : i32
    %268 = llvm.icmp "eq" %267, %16 : i32
    %269 = llvm.urem %265, %10 : i32
    %270 = llvm.getelementptr %263[%269] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %271 = llvm.insertelement %262, %2[%16 : i32] : vector<1xf32>
    %272 = llvm.extractelement %271[%16 : i32] : vector<1xf32>
    %273 = llvm.bitcast %272 : f32 to i32
    %274 = llvm.insertelement %273, %1[%16 : i32] : vector<1xi32>
    %275 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %270, %274, %268 : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void
    nvvm.barrier0
    %276 = nvvm.read.ptx.sreg.tid.x : i32
    %277 = llvm.urem %276, %13 : i32
    %278 = llvm.icmp "slt" %276, %10 : i32
    %279 = llvm.getelementptr %263[%276] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %280 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b" %279, %278 : (!llvm.ptr<3>, i1) -> i32
    %281 = llvm.insertelement %280, %1[%16 : i32] : vector<1xi32>
    %282 = llvm.extractelement %281[%16 : i32] : vector<1xi32>
    %283 = llvm.bitcast %282 : i32 to f32
    %284 = llvm.insertelement %283, %2[%16 : i32] : vector<1xf32>
    %285 = llvm.extractelement %284[%16 : i32] : vector<1xf32>
    %286 = llvm.bitcast %285 : f32 to i32
    %287 = nvvm.shfl.sync  bfly %17, %286, %11, %3 : i32 -> i32
    %288 = llvm.bitcast %287 : i32 to f32
    %289 = llvm.fadd %285, %288 : f32
    %290 = llvm.bitcast %289 : f32 to i32
    %291 = nvvm.shfl.sync  bfly %17, %290, %12, %3 : i32 -> i32
    %292 = llvm.bitcast %291 : i32 to f32
    %293 = llvm.fadd %289, %292 : f32
    %294 = llvm.bitcast %293 : f32 to i32
    %295 = nvvm.shfl.sync  bfly %17, %294, %15, %3 : i32 -> i32
    %296 = llvm.bitcast %295 : i32 to f32
    %297 = llvm.fadd %293, %296 : f32
    %298 = llvm.getelementptr %263[%276] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %299 = llvm.urem %277, %10 : i32
    %300 = llvm.icmp "eq" %299, %16 : i32
    %301 = llvm.and %278, %300 : i1
    %302 = llvm.insertelement %297, %2[%16 : i32] : vector<1xf32>
    %303 = llvm.extractelement %302[%16 : i32] : vector<1xf32>
    %304 = llvm.bitcast %303 : f32 to i32
    %305 = llvm.insertelement %304, %1[%16 : i32] : vector<1xi32>
    %306 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b" %298, %305, %301 : (!llvm.ptr<3>, vector<1xi32>, i1) -> !llvm.void
    nvvm.barrier0
    %307 = llvm.load %263 : !llvm.ptr<3> -> f32
    %308 = llvm.inline_asm asm_dialect = att operand_attrs = [] "div.full.f32 $0, $1, $2;", "=r,r,r" %242, %307 : (f32, f32) -> f32
    %309 = llvm.mul %119, %arg3 : i32
    %310 = llvm.getelementptr %arg0[%309] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %311 = llvm.getelementptr %310[%57] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %312 = llvm.insertelement %308, %2[%16 : i32] : vector<1xf32>
    %313 = llvm.bitcast %312 : vector<1xf32> to i32
    %314 = nvvm.read.ptx.sreg.tid.x : i32
    %315 = llvm.urem %314, %13 : i32
    %316 = llvm.udiv %314, %13 : i32
    %317 = llvm.and %16, %315 : i32
    %318 = llvm.icmp "eq" %317, %16 : i32
    %319 = llvm.and %4, %318 : i1
    %320 = llvm.and %16, %316 : i32
    %321 = llvm.icmp "eq" %320, %16 : i32
    %322 = llvm.and %319, %321 : i1
    %323 = llvm.and %322, %58 : i1
    %324 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b" %313, %311, %323 : (i32, !llvm.ptr<1>, i1) -> !llvm.void
    %325 = llvm.add %120, %15 : i32
    %326 = llvm.icmp "slt" %325, %15 : i32
    %327 = llvm.select %326, %325, %16 : i1, i32
    %328 = llvm.add %119, %20 : i32
    %329 = llvm.mul %328, %arg2 : i32
    %330 = llvm.getelementptr %arg1[%329] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %331 = llvm.getelementptr %330[%57] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32
    %332 = llvm.mul %327, %5 : i32
    %333 = llvm.add %332, %16 : i32
    %334 = llvm.mul %16, %15 : i32
    %335 = llvm.add %333, %334 : i32
    %336 = llvm.getelementptr %6[%335] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %337 = llvm.and %124, %58 : i1
    %338 = nvvm.read.ptx.sreg.tid.x : i32
    %339 = llvm.urem %338, %13 : i32
    %340 = llvm.udiv %338, %13 : i32
    %341 = llvm.and %339, %15 : i32
    %342 = llvm.icmp "eq" %341, %16 : i32
    %343 = llvm.select %342, %16, %15 : i1, i32
    %344 = llvm.xor %16, %343 : i32
    %345 = llvm.and %339, %12 : i32
    %346 = llvm.icmp "eq" %345, %16 : i32
    %347 = llvm.select %346, %16, %12 : i1, i32
    %348 = llvm.xor %344, %347 : i32
    %349 = llvm.and %339, %11 : i32
    %350 = llvm.icmp "eq" %349, %16 : i32
    %351 = llvm.select %350, %16, %11 : i1, i32
    %352 = llvm.xor %348, %351 : i32
    %353 = llvm.and %339, %10 : i32
    %354 = llvm.icmp "eq" %353, %16 : i32
    %355 = llvm.select %354, %16, %10 : i1, i32
    %356 = llvm.xor %352, %355 : i32
    %357 = llvm.and %339, %9 : i32
    %358 = llvm.icmp "eq" %357, %16 : i32
    %359 = llvm.select %358, %16, %9 : i1, i32
    %360 = llvm.xor %356, %359 : i32
    %361 = llvm.and %340, %15 : i32
    %362 = llvm.icmp "eq" %361, %16 : i32
    %363 = llvm.select %362, %16, %13 : i1, i32
    %364 = llvm.xor %360, %363 : i32
    %365 = llvm.and %340, %12 : i32
    %366 = llvm.icmp "eq" %365, %16 : i32
    %367 = llvm.select %366, %16, %8 : i1, i32
    %368 = llvm.xor %364, %367 : i32
    %369 = llvm.and %340, %11 : i32
    %370 = llvm.icmp "eq" %369, %16 : i32
    %371 = llvm.select %370, %16, %7 : i1, i32
    %372 = llvm.xor %368, %371 : i32
    %373 = llvm.mul %372, %15 : i32
    %374 = llvm.add %373, %16 : i32
    %375 = llvm.getelementptr inbounds %336[%374] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, f32
    %376 = llvm.select %337, %11, %16 : i1, i32
    %377 = nvvm.read.ptx.sreg.tid.x : i32
    %378 = llvm.urem %377, %13 : i32
    %379 = llvm.udiv %377, %13 : i32
    %380 = llvm.and %16, %378 : i32
    %381 = llvm.icmp "eq" %380, %16 : i32
    %382 = llvm.and %4, %381 : i1
    %383 = llvm.and %16, %379 : i32
    %384 = llvm.icmp "eq" %383, %16 : i32
    %385 = llvm.and %382, %384 : i1
    %386 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b" %375, %331, %376, %385 : (!llvm.ptr<3>, !llvm.ptr<1>, i32, i1) -> !llvm.void
    %387 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "cp.async.commit_group ;", ""  : () -> !llvm.void
    %388 = llvm.add %119, %20 : i32
    llvm.br ^bb1(%388, %327, %127 : i32, i32, i32)
  ^bb3:  // pred: ^bb1
    %389 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "cp.async.wait_group 0x0;", ""  : () -> !llvm.void
    nvvm.barrier0
    llvm.return
  }
}

