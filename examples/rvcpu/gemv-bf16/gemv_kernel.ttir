#loc = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:22)
#loc32 = loc(callsite(#loc1 at #loc19))
module {
  tt.func public @gemv_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64xi32> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<16x64xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc7)
    %7 = tt.splat %arg5 : i32 -> tensor<16x1xi32> loc(#loc8)
    %8 = arith.muli %6, %7 : tensor<16x1xi32> loc(#loc8)
    %9 = tt.expand_dims %5 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc9)
    %10 = tt.broadcast %8 : tensor<16x1xi32> -> tensor<16x64xi32> loc(#loc10)
    %11 = tt.broadcast %9 : tensor<1x64xi32> -> tensor<16x64xi32> loc(#loc10)
    %12 = arith.addi %10, %11 : tensor<16x64xi32> loc(#loc10)
    %13 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<16x64x!tt.ptr<bf16>> loc(#loc11)
    %14 = tt.addptr %13, %12 : tensor<16x64x!tt.ptr<bf16>>, tensor<16x64xi32> loc(#loc11)
    %15 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x!tt.ptr<bf16>> loc(#loc12)
    %16 = tt.addptr %15, %5 : tensor<64x!tt.ptr<bf16>>, tensor<64xi32> loc(#loc12)
    %17:3 = scf.for %arg6 = %c0_i32 to %arg4 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %16) -> (tensor<16xf32>, tensor<16x64x!tt.ptr<bf16>>, tensor<64x!tt.ptr<bf16>>)  : i32 {
      %21 = tt.load %arg8 : tensor<16x64x!tt.ptr<bf16>> loc(#loc14)
      %22 = tt.load %arg9 : tensor<64x!tt.ptr<bf16>> loc(#loc15)
      %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<64xbf16> -> tensor<1x64xbf16> loc(#loc16)
      %24 = tt.broadcast %23 : tensor<1x64xbf16> -> tensor<16x64xbf16> loc(#loc17)
      %25 = arith.mulf %21, %24 : tensor<16x64xbf16> loc(#loc17)
      %26 = arith.extf %25 : tensor<16x64xbf16> to tensor<16x64xf32> loc(#loc30)
      %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
      ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc19)), %arg11: f32 loc(callsite(#loc1 at #loc19))):
        %31 = arith.addf %arg10, %arg11 : f32 loc(#loc34)
        tt.reduce.return %31 : f32 loc(#loc31)
      }) : (tensor<16x64xf32>) -> tensor<16xf32> loc(#loc31)
      %28 = arith.addf %arg7, %27 : tensor<16xf32> loc(#loc22)
      %29 = tt.addptr %arg8, %cst_1 : tensor<16x64x!tt.ptr<bf16>>, tensor<16x64xi32> loc(#loc23)
      %30 = tt.addptr %arg9, %cst_0 : tensor<64x!tt.ptr<bf16>>, tensor<64xi32> loc(#loc24)
      scf.yield %28, %29, %30 : tensor<16xf32>, tensor<16x64x!tt.ptr<bf16>>, tensor<64x!tt.ptr<bf16>> loc(#loc25)
    } loc(#loc13)
    %18 = arith.truncf %17#0 : tensor<16xf32> to tensor<16xbf16> loc(#loc26)
    %19 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<16x!tt.ptr<bf16>> loc(#loc27)
    %20 = tt.addptr %19, %4 : tensor<16x!tt.ptr<bf16>>, tensor<16xi32> loc(#loc27)
    tt.store %20, %18 : tensor<16x!tt.ptr<bf16>> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":29:28)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:19)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:47)
#loc5 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":30:34)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":31:22)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:16)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:27)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:42)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:39)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":33:13)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":34:12)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":37:25)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":38:20)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":39:20)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:28)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:26)
#loc18 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":266:46)
#loc20 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":267:36)
#loc21 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":256:15)
#loc22 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":40:15)
#loc23 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":41:13)
#loc24 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:13)
#loc25 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":42:8)
#loc26 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":44:15)
#loc27 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":45:12)
#loc28 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:16)
#loc29 = loc("/root/triton/triton-cpu/./python/tutorials/matrix-vector-multiplication-bf16.py":46:4)
#loc30 = loc(callsite(#loc18 at #loc19))
#loc31 = loc(callsite(#loc20 at #loc19))
#loc33 = loc(callsite(#loc21 at #loc20))
#loc34 = loc(callsite(#loc33 at #loc19))
