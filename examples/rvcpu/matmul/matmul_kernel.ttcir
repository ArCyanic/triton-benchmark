#loc = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0)
#map = affine_map<(d0, d1, d2) -> (d0, d2)>
#map1 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map2 = affine_map<(d0, d1, d2) -> (d0, d1)>
module {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":165:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : vector<32x32xi64> loc(#loc1)
    %c30_i32 = arith.constant 30 : i32 loc(#loc1)
    %c29_i32 = arith.constant 29 : i32 loc(#loc1)
    %c28_i32 = arith.constant 28 : i32 loc(#loc1)
    %c27_i32 = arith.constant 27 : i32 loc(#loc1)
    %c26_i32 = arith.constant 26 : i32 loc(#loc1)
    %c25_i32 = arith.constant 25 : i32 loc(#loc1)
    %c24_i32 = arith.constant 24 : i32 loc(#loc1)
    %c23_i32 = arith.constant 23 : i32 loc(#loc1)
    %c22_i32 = arith.constant 22 : i32 loc(#loc1)
    %c21_i32 = arith.constant 21 : i32 loc(#loc1)
    %c20_i32 = arith.constant 20 : i32 loc(#loc1)
    %c19_i32 = arith.constant 19 : i32 loc(#loc1)
    %c18_i32 = arith.constant 18 : i32 loc(#loc1)
    %c17_i32 = arith.constant 17 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %c14_i32 = arith.constant 14 : i32 loc(#loc1)
    %c13_i32 = arith.constant 13 : i32 loc(#loc1)
    %c12_i32 = arith.constant 12 : i32 loc(#loc1)
    %c11_i32 = arith.constant 11 : i32 loc(#loc1)
    %c10_i32 = arith.constant 10 : i32 loc(#loc1)
    %c9_i32 = arith.constant 9 : i32 loc(#loc1)
    %c7_i32 = arith.constant 7 : i32 loc(#loc1)
    %c6_i32 = arith.constant 6 : i32 loc(#loc1)
    %c5_i32 = arith.constant 5 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<4> : vector<32x32xi32> loc(#loc1)
    %cst_2 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]> : vector<32xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c32 = arith.constant 32 : index loc(#loc1)
    %c1 = arith.constant 1 : index loc(#loc1)
    %c0 = arith.constant 0 : index loc(#loc2)
    %cst_3 = arith.constant dense<0.000000e+00> : vector<32x32xf32> loc(#loc2)
    %c31_i32 = arith.constant 31 : i32 loc(#loc3)
    %c1_i32 = arith.constant 1 : i32 loc(#loc3)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc4)
    %1 = arith.addi %arg3, %c31_i32 : i32 loc(#loc47)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc48)
    %3 = arith.addi %arg4, %c31_i32 : i32 loc(#loc49)
    %4 = arith.divsi %3, %c32_i32 : i32 loc(#loc50)
    %5 = arith.muli %4, %c8_i32 : i32 loc(#loc9)
    %6 = arith.divsi %0, %5 : i32 loc(#loc10)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc11)
    %8 = arith.subi %2, %7 : i32 loc(#loc12)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc13)
    %10 = arith.remsi %0, %9 : i32 loc(#loc14)
    %11 = arith.addi %7, %10 : i32 loc(#loc15)
    %12 = arith.remsi %0, %5 : i32 loc(#loc16)
    %13 = arith.divsi %12, %9 : i32 loc(#loc17)
    %14 = arith.muli %11, %c32_i32 : i32 loc(#loc18)
    %15 = vector.splat %14 : vector<32xi32> loc(#loc19)
    %16 = arith.addi %15, %cst_2 : vector<32xi32> loc(#loc19)
    %17 = vector.splat %arg3 : vector<32xi32> loc(#loc20)
    %18 = arith.remsi %16, %17 : vector<32xi32> loc(#loc20)
    %19 = arith.muli %13, %c32_i32 : i32 loc(#loc21)
    %20 = vector.splat %19 : vector<32xi32> loc(#loc22)
    %21 = arith.addi %20, %cst_2 : vector<32xi32> loc(#loc22)
    %22 = vector.splat %arg4 : vector<32xi32> loc(#loc23)
    %23 = arith.remsi %21, %22 : vector<32xi32> loc(#loc23)
    %24 = vector.shape_cast %18 {axis = 1 : i32} : vector<32xi32> to vector<32x1xi32> loc(#loc24)
    %25 = vector.splat %arg6 : vector<32x1xi32> loc(#loc25)
    %26 = arith.muli %24, %25 : vector<32x1xi32> loc(#loc25)
    %27 = vector.shape_cast %cst_2 {axis = 0 : i32} : vector<32xi32> to vector<1x32xi32> loc(#loc26)
    %28 = vector.broadcast %26 : vector<32x1xi32> to vector<32x32xi32> loc(#loc27)
    %29 = vector.broadcast %27 : vector<1x32xi32> to vector<32x32xi32> loc(#loc27)
    %30 = arith.addi %28, %29 : vector<32x32xi32> loc(#loc27)
    %31 = tt.ptr_to_int %arg0 : !tt.ptr<f32> -> i64 loc(#loc28)
    %32 = vector.splat %31 : vector<32x32xi64> loc(#loc28)
    %33 = arith.muli %30, %cst_1 : vector<32x32xi32> loc(#loc28)
    %34 = arith.extsi %33 : vector<32x32xi32> to vector<32x32xi64> loc(#loc28)
    %35 = arith.addi %32, %34 : vector<32x32xi64> loc(#loc28)
    %36 = vector.shape_cast %cst_2 {axis = 1 : i32} : vector<32xi32> to vector<32x1xi32> loc(#loc29)
    %37 = vector.splat %arg7 : vector<32x1xi32> loc(#loc30)
    %38 = arith.muli %36, %37 : vector<32x1xi32> loc(#loc30)
    %39 = vector.shape_cast %23 {axis = 0 : i32} : vector<32xi32> to vector<1x32xi32> loc(#loc31)
    %40 = vector.broadcast %38 : vector<32x1xi32> to vector<32x32xi32> loc(#loc32)
    %41 = vector.broadcast %39 : vector<1x32xi32> to vector<32x32xi32> loc(#loc32)
    %42 = arith.addi %40, %41 : vector<32x32xi32> loc(#loc32)
    %43 = tt.ptr_to_int %arg1 : !tt.ptr<f32> -> i64 loc(#loc33)
    %44 = vector.splat %43 : vector<32x32xi64> loc(#loc33)
    %45 = arith.muli %42, %cst_1 : vector<32x32xi32> loc(#loc33)
    %46 = arith.extsi %45 : vector<32x32xi32> to vector<32x32xi64> loc(#loc33)
    %47 = arith.addi %44, %46 : vector<32x32xi64> loc(#loc33)
    %48 = arith.addi %arg5, %c31_i32 : i32 loc(#loc51)
    %49 = arith.divsi %48, %c32_i32 : i32 loc(#loc52)
    %50 = arith.muli %arg7, %c32_i32 : i32 loc(#loc35)
    %51 = vector.splat %50 : vector<32x32xi32> loc(#loc36)
    %alloca = memref.alloca() {alignment = 64 : i64} : memref<32x32xf32> loc(#loc37)
    %alloca_4 = memref.alloca() {alignment = 64 : i64} : memref<32x32xi64> loc(#loc33)
    %52:3 = scf.for %arg9 = %c0_i32 to %49 step %c1_i32 iter_args(%arg10 = %cst_3, %arg11 = %35, %arg12 = %47) -> (vector<32x32xf32>, vector<32x32xi64>, vector<32x32xi64>)  : i32 {
      %244 = vector.extract %arg11[0, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %245 = tt.int_to_ptr %244 : i64 -> !tt.ptr<f32> loc(#loc2)
      %246 = triton_cpu.ptr_to_memref %245 : <f32> -> memref<32xf32> loc(#loc2)
      %247 = vector.load %246[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %248 = vector.insert %247, %cst_3 [0] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %249 = vector.extract %arg11[1, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %250 = tt.int_to_ptr %249 : i64 -> !tt.ptr<f32> loc(#loc2)
      %251 = triton_cpu.ptr_to_memref %250 : <f32> -> memref<32xf32> loc(#loc2)
      %252 = vector.load %251[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %253 = vector.insert %252, %248 [1] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %254 = vector.extract %arg11[2, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %255 = tt.int_to_ptr %254 : i64 -> !tt.ptr<f32> loc(#loc2)
      %256 = triton_cpu.ptr_to_memref %255 : <f32> -> memref<32xf32> loc(#loc2)
      %257 = vector.load %256[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %258 = vector.insert %257, %253 [2] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %259 = vector.extract %arg11[3, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %260 = tt.int_to_ptr %259 : i64 -> !tt.ptr<f32> loc(#loc2)
      %261 = triton_cpu.ptr_to_memref %260 : <f32> -> memref<32xf32> loc(#loc2)
      %262 = vector.load %261[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %263 = vector.insert %262, %258 [3] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %264 = vector.extract %arg11[4, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %265 = tt.int_to_ptr %264 : i64 -> !tt.ptr<f32> loc(#loc2)
      %266 = triton_cpu.ptr_to_memref %265 : <f32> -> memref<32xf32> loc(#loc2)
      %267 = vector.load %266[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %268 = vector.insert %267, %263 [4] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %269 = vector.extract %arg11[5, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %270 = tt.int_to_ptr %269 : i64 -> !tt.ptr<f32> loc(#loc2)
      %271 = triton_cpu.ptr_to_memref %270 : <f32> -> memref<32xf32> loc(#loc2)
      %272 = vector.load %271[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %273 = vector.insert %272, %268 [5] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %274 = vector.extract %arg11[6, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %275 = tt.int_to_ptr %274 : i64 -> !tt.ptr<f32> loc(#loc2)
      %276 = triton_cpu.ptr_to_memref %275 : <f32> -> memref<32xf32> loc(#loc2)
      %277 = vector.load %276[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %278 = vector.insert %277, %273 [6] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %279 = vector.extract %arg11[7, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %280 = tt.int_to_ptr %279 : i64 -> !tt.ptr<f32> loc(#loc2)
      %281 = triton_cpu.ptr_to_memref %280 : <f32> -> memref<32xf32> loc(#loc2)
      %282 = vector.load %281[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %283 = vector.insert %282, %278 [7] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %284 = vector.extract %arg11[8, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %285 = tt.int_to_ptr %284 : i64 -> !tt.ptr<f32> loc(#loc2)
      %286 = triton_cpu.ptr_to_memref %285 : <f32> -> memref<32xf32> loc(#loc2)
      %287 = vector.load %286[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %288 = vector.insert %287, %283 [8] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %289 = vector.extract %arg11[9, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %290 = tt.int_to_ptr %289 : i64 -> !tt.ptr<f32> loc(#loc2)
      %291 = triton_cpu.ptr_to_memref %290 : <f32> -> memref<32xf32> loc(#loc2)
      %292 = vector.load %291[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %293 = vector.insert %292, %288 [9] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %294 = vector.extract %arg11[10, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %295 = tt.int_to_ptr %294 : i64 -> !tt.ptr<f32> loc(#loc2)
      %296 = triton_cpu.ptr_to_memref %295 : <f32> -> memref<32xf32> loc(#loc2)
      %297 = vector.load %296[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %298 = vector.insert %297, %293 [10] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %299 = vector.extract %arg11[11, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %300 = tt.int_to_ptr %299 : i64 -> !tt.ptr<f32> loc(#loc2)
      %301 = triton_cpu.ptr_to_memref %300 : <f32> -> memref<32xf32> loc(#loc2)
      %302 = vector.load %301[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %303 = vector.insert %302, %298 [11] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %304 = vector.extract %arg11[12, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %305 = tt.int_to_ptr %304 : i64 -> !tt.ptr<f32> loc(#loc2)
      %306 = triton_cpu.ptr_to_memref %305 : <f32> -> memref<32xf32> loc(#loc2)
      %307 = vector.load %306[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %308 = vector.insert %307, %303 [12] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %309 = vector.extract %arg11[13, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %310 = tt.int_to_ptr %309 : i64 -> !tt.ptr<f32> loc(#loc2)
      %311 = triton_cpu.ptr_to_memref %310 : <f32> -> memref<32xf32> loc(#loc2)
      %312 = vector.load %311[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %313 = vector.insert %312, %308 [13] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %314 = vector.extract %arg11[14, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %315 = tt.int_to_ptr %314 : i64 -> !tt.ptr<f32> loc(#loc2)
      %316 = triton_cpu.ptr_to_memref %315 : <f32> -> memref<32xf32> loc(#loc2)
      %317 = vector.load %316[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %318 = vector.insert %317, %313 [14] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %319 = vector.extract %arg11[15, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %320 = tt.int_to_ptr %319 : i64 -> !tt.ptr<f32> loc(#loc2)
      %321 = triton_cpu.ptr_to_memref %320 : <f32> -> memref<32xf32> loc(#loc2)
      %322 = vector.load %321[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %323 = vector.insert %322, %318 [15] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %324 = vector.extract %arg11[16, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %325 = tt.int_to_ptr %324 : i64 -> !tt.ptr<f32> loc(#loc2)
      %326 = triton_cpu.ptr_to_memref %325 : <f32> -> memref<32xf32> loc(#loc2)
      %327 = vector.load %326[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %328 = vector.insert %327, %323 [16] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %329 = vector.extract %arg11[17, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %330 = tt.int_to_ptr %329 : i64 -> !tt.ptr<f32> loc(#loc2)
      %331 = triton_cpu.ptr_to_memref %330 : <f32> -> memref<32xf32> loc(#loc2)
      %332 = vector.load %331[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %333 = vector.insert %332, %328 [17] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %334 = vector.extract %arg11[18, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %335 = tt.int_to_ptr %334 : i64 -> !tt.ptr<f32> loc(#loc2)
      %336 = triton_cpu.ptr_to_memref %335 : <f32> -> memref<32xf32> loc(#loc2)
      %337 = vector.load %336[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %338 = vector.insert %337, %333 [18] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %339 = vector.extract %arg11[19, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %340 = tt.int_to_ptr %339 : i64 -> !tt.ptr<f32> loc(#loc2)
      %341 = triton_cpu.ptr_to_memref %340 : <f32> -> memref<32xf32> loc(#loc2)
      %342 = vector.load %341[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %343 = vector.insert %342, %338 [19] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %344 = vector.extract %arg11[20, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %345 = tt.int_to_ptr %344 : i64 -> !tt.ptr<f32> loc(#loc2)
      %346 = triton_cpu.ptr_to_memref %345 : <f32> -> memref<32xf32> loc(#loc2)
      %347 = vector.load %346[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %348 = vector.insert %347, %343 [20] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %349 = vector.extract %arg11[21, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %350 = tt.int_to_ptr %349 : i64 -> !tt.ptr<f32> loc(#loc2)
      %351 = triton_cpu.ptr_to_memref %350 : <f32> -> memref<32xf32> loc(#loc2)
      %352 = vector.load %351[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %353 = vector.insert %352, %348 [21] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %354 = vector.extract %arg11[22, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %355 = tt.int_to_ptr %354 : i64 -> !tt.ptr<f32> loc(#loc2)
      %356 = triton_cpu.ptr_to_memref %355 : <f32> -> memref<32xf32> loc(#loc2)
      %357 = vector.load %356[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %358 = vector.insert %357, %353 [22] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %359 = vector.extract %arg11[23, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %360 = tt.int_to_ptr %359 : i64 -> !tt.ptr<f32> loc(#loc2)
      %361 = triton_cpu.ptr_to_memref %360 : <f32> -> memref<32xf32> loc(#loc2)
      %362 = vector.load %361[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %363 = vector.insert %362, %358 [23] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %364 = vector.extract %arg11[24, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %365 = tt.int_to_ptr %364 : i64 -> !tt.ptr<f32> loc(#loc2)
      %366 = triton_cpu.ptr_to_memref %365 : <f32> -> memref<32xf32> loc(#loc2)
      %367 = vector.load %366[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %368 = vector.insert %367, %363 [24] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %369 = vector.extract %arg11[25, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %370 = tt.int_to_ptr %369 : i64 -> !tt.ptr<f32> loc(#loc2)
      %371 = triton_cpu.ptr_to_memref %370 : <f32> -> memref<32xf32> loc(#loc2)
      %372 = vector.load %371[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %373 = vector.insert %372, %368 [25] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %374 = vector.extract %arg11[26, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %375 = tt.int_to_ptr %374 : i64 -> !tt.ptr<f32> loc(#loc2)
      %376 = triton_cpu.ptr_to_memref %375 : <f32> -> memref<32xf32> loc(#loc2)
      %377 = vector.load %376[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %378 = vector.insert %377, %373 [26] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %379 = vector.extract %arg11[27, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %380 = tt.int_to_ptr %379 : i64 -> !tt.ptr<f32> loc(#loc2)
      %381 = triton_cpu.ptr_to_memref %380 : <f32> -> memref<32xf32> loc(#loc2)
      %382 = vector.load %381[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %383 = vector.insert %382, %378 [27] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %384 = vector.extract %arg11[28, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %385 = tt.int_to_ptr %384 : i64 -> !tt.ptr<f32> loc(#loc2)
      %386 = triton_cpu.ptr_to_memref %385 : <f32> -> memref<32xf32> loc(#loc2)
      %387 = vector.load %386[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %388 = vector.insert %387, %383 [28] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %389 = vector.extract %arg11[29, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %390 = tt.int_to_ptr %389 : i64 -> !tt.ptr<f32> loc(#loc2)
      %391 = triton_cpu.ptr_to_memref %390 : <f32> -> memref<32xf32> loc(#loc2)
      %392 = vector.load %391[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %393 = vector.insert %392, %388 [29] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %394 = vector.extract %arg11[30, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %395 = tt.int_to_ptr %394 : i64 -> !tt.ptr<f32> loc(#loc2)
      %396 = triton_cpu.ptr_to_memref %395 : <f32> -> memref<32xf32> loc(#loc2)
      %397 = vector.load %396[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %398 = vector.insert %397, %393 [30] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      %399 = vector.extract %arg11[31, 0] : i64 from vector<32x32xi64> loc(#loc2)
      %400 = tt.int_to_ptr %399 : i64 -> !tt.ptr<f32> loc(#loc2)
      %401 = triton_cpu.ptr_to_memref %400 : <f32> -> memref<32xf32> loc(#loc2)
      %402 = vector.load %401[%c0] : memref<32xf32>, vector<32xf32> loc(#loc2)
      %403 = vector.insert %402, %398 [31] : vector<32xf32> into vector<32x32xf32> loc(#loc2)
      vector.transfer_write %arg12, %alloca_4[%c0, %c0] {in_bounds = [true, true]} : vector<32x32xi64>, memref<32x32xi64> loc(#loc33)
      scf.for %arg13 = %c0 to %c32 step %c1 {
        scf.for %arg14 = %c0 to %c32 step %c1 {
          %410 = memref.load %alloca_4[%arg13, %arg14] : memref<32x32xi64> loc(#loc33)
          %411 = tt.int_to_ptr %410 : i64 -> !tt.ptr<f32> loc(#loc33)
          %412 = tt.load %411 : !tt.ptr<f32> loc(#loc37)
          memref.store %412, %alloca[%arg13, %arg14] : memref<32x32xf32> loc(#loc37)
        } loc(#loc37)
      } loc(#loc37)
      %404 = vector.transfer_read %alloca[%c0, %c0], %cst_0 {in_bounds = [true, true]} : memref<32x32xf32>, vector<32x32xf32> loc(#loc37)
      %405 = vector.contract {indexing_maps = [#map, #map1, #map2], iterator_types = ["parallel", "parallel", "reduction"], kind = #vector.kind<add>} %403, %404, %arg10 : vector<32x32xf32>, vector<32x32xf32> into vector<32x32xf32> loc(#loc39)
      %406 = arith.addi %arg11, %cst : vector<32x32xi64> loc(#loc40)
      %407 = arith.muli %51, %cst_1 : vector<32x32xi32> loc(#loc36)
      %408 = arith.extsi %407 : vector<32x32xi32> to vector<32x32xi64> loc(#loc36)
      %409 = arith.addi %arg12, %408 : vector<32x32xi64> loc(#loc36)
      scf.yield %405, %406, %409 : vector<32x32xf32>, vector<32x32xi64>, vector<32x32xi64> loc(#loc41)
    } loc(#loc38)
    %53 = arith.muli %arg8, %14 : i32 loc(#loc42)
    %54 = tt.addptr %arg2, %53 : !tt.ptr<f32>, i32 loc(#loc43)
    %55 = tt.addptr %54, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %56 = triton_cpu.ptr_to_memref %55 : <f32> -> memref<32xf32> loc(#loc45)
    %57 = vector.extract %52#0[0] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %57, %56[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %58 = arith.addi %14, %c1_i32 : i32 loc(#loc19)
    %59 = arith.muli %arg8, %58 : i32 loc(#loc42)
    %60 = tt.addptr %arg2, %59 : !tt.ptr<f32>, i32 loc(#loc43)
    %61 = tt.addptr %60, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %62 = triton_cpu.ptr_to_memref %61 : <f32> -> memref<32xf32> loc(#loc45)
    %63 = vector.extract %52#0[1] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %63, %62[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %64 = arith.addi %14, %c2_i32 : i32 loc(#loc19)
    %65 = arith.muli %arg8, %64 : i32 loc(#loc42)
    %66 = tt.addptr %arg2, %65 : !tt.ptr<f32>, i32 loc(#loc43)
    %67 = tt.addptr %66, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %68 = triton_cpu.ptr_to_memref %67 : <f32> -> memref<32xf32> loc(#loc45)
    %69 = vector.extract %52#0[2] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %69, %68[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %70 = arith.addi %14, %c3_i32 : i32 loc(#loc19)
    %71 = arith.muli %arg8, %70 : i32 loc(#loc42)
    %72 = tt.addptr %arg2, %71 : !tt.ptr<f32>, i32 loc(#loc43)
    %73 = tt.addptr %72, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %74 = triton_cpu.ptr_to_memref %73 : <f32> -> memref<32xf32> loc(#loc45)
    %75 = vector.extract %52#0[3] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %75, %74[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %76 = arith.addi %14, %c4_i32 : i32 loc(#loc19)
    %77 = arith.muli %arg8, %76 : i32 loc(#loc42)
    %78 = tt.addptr %arg2, %77 : !tt.ptr<f32>, i32 loc(#loc43)
    %79 = tt.addptr %78, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %80 = triton_cpu.ptr_to_memref %79 : <f32> -> memref<32xf32> loc(#loc45)
    %81 = vector.extract %52#0[4] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %81, %80[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %82 = arith.addi %14, %c5_i32 : i32 loc(#loc19)
    %83 = arith.muli %arg8, %82 : i32 loc(#loc42)
    %84 = tt.addptr %arg2, %83 : !tt.ptr<f32>, i32 loc(#loc43)
    %85 = tt.addptr %84, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %86 = triton_cpu.ptr_to_memref %85 : <f32> -> memref<32xf32> loc(#loc45)
    %87 = vector.extract %52#0[5] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %87, %86[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %88 = arith.addi %14, %c6_i32 : i32 loc(#loc19)
    %89 = arith.muli %arg8, %88 : i32 loc(#loc42)
    %90 = tt.addptr %arg2, %89 : !tt.ptr<f32>, i32 loc(#loc43)
    %91 = tt.addptr %90, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %92 = triton_cpu.ptr_to_memref %91 : <f32> -> memref<32xf32> loc(#loc45)
    %93 = vector.extract %52#0[6] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %93, %92[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %94 = arith.addi %14, %c7_i32 : i32 loc(#loc19)
    %95 = arith.muli %arg8, %94 : i32 loc(#loc42)
    %96 = tt.addptr %arg2, %95 : !tt.ptr<f32>, i32 loc(#loc43)
    %97 = tt.addptr %96, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %98 = triton_cpu.ptr_to_memref %97 : <f32> -> memref<32xf32> loc(#loc45)
    %99 = vector.extract %52#0[7] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %99, %98[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %100 = arith.addi %14, %c8_i32 : i32 loc(#loc19)
    %101 = arith.muli %arg8, %100 : i32 loc(#loc42)
    %102 = tt.addptr %arg2, %101 : !tt.ptr<f32>, i32 loc(#loc43)
    %103 = tt.addptr %102, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %104 = triton_cpu.ptr_to_memref %103 : <f32> -> memref<32xf32> loc(#loc45)
    %105 = vector.extract %52#0[8] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %105, %104[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %106 = arith.addi %14, %c9_i32 : i32 loc(#loc19)
    %107 = arith.muli %arg8, %106 : i32 loc(#loc42)
    %108 = tt.addptr %arg2, %107 : !tt.ptr<f32>, i32 loc(#loc43)
    %109 = tt.addptr %108, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %110 = triton_cpu.ptr_to_memref %109 : <f32> -> memref<32xf32> loc(#loc45)
    %111 = vector.extract %52#0[9] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %111, %110[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %112 = arith.addi %14, %c10_i32 : i32 loc(#loc19)
    %113 = arith.muli %arg8, %112 : i32 loc(#loc42)
    %114 = tt.addptr %arg2, %113 : !tt.ptr<f32>, i32 loc(#loc43)
    %115 = tt.addptr %114, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %116 = triton_cpu.ptr_to_memref %115 : <f32> -> memref<32xf32> loc(#loc45)
    %117 = vector.extract %52#0[10] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %117, %116[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %118 = arith.addi %14, %c11_i32 : i32 loc(#loc19)
    %119 = arith.muli %arg8, %118 : i32 loc(#loc42)
    %120 = tt.addptr %arg2, %119 : !tt.ptr<f32>, i32 loc(#loc43)
    %121 = tt.addptr %120, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %122 = triton_cpu.ptr_to_memref %121 : <f32> -> memref<32xf32> loc(#loc45)
    %123 = vector.extract %52#0[11] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %123, %122[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %124 = arith.addi %14, %c12_i32 : i32 loc(#loc19)
    %125 = arith.muli %arg8, %124 : i32 loc(#loc42)
    %126 = tt.addptr %arg2, %125 : !tt.ptr<f32>, i32 loc(#loc43)
    %127 = tt.addptr %126, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %128 = triton_cpu.ptr_to_memref %127 : <f32> -> memref<32xf32> loc(#loc45)
    %129 = vector.extract %52#0[12] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %129, %128[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %130 = arith.addi %14, %c13_i32 : i32 loc(#loc19)
    %131 = arith.muli %arg8, %130 : i32 loc(#loc42)
    %132 = tt.addptr %arg2, %131 : !tt.ptr<f32>, i32 loc(#loc43)
    %133 = tt.addptr %132, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %134 = triton_cpu.ptr_to_memref %133 : <f32> -> memref<32xf32> loc(#loc45)
    %135 = vector.extract %52#0[13] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %135, %134[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %136 = arith.addi %14, %c14_i32 : i32 loc(#loc19)
    %137 = arith.muli %arg8, %136 : i32 loc(#loc42)
    %138 = tt.addptr %arg2, %137 : !tt.ptr<f32>, i32 loc(#loc43)
    %139 = tt.addptr %138, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %140 = triton_cpu.ptr_to_memref %139 : <f32> -> memref<32xf32> loc(#loc45)
    %141 = vector.extract %52#0[14] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %141, %140[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %142 = arith.addi %14, %c15_i32 : i32 loc(#loc19)
    %143 = arith.muli %arg8, %142 : i32 loc(#loc42)
    %144 = tt.addptr %arg2, %143 : !tt.ptr<f32>, i32 loc(#loc43)
    %145 = tt.addptr %144, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %146 = triton_cpu.ptr_to_memref %145 : <f32> -> memref<32xf32> loc(#loc45)
    %147 = vector.extract %52#0[15] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %147, %146[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %148 = arith.addi %14, %c16_i32 : i32 loc(#loc19)
    %149 = arith.muli %arg8, %148 : i32 loc(#loc42)
    %150 = tt.addptr %arg2, %149 : !tt.ptr<f32>, i32 loc(#loc43)
    %151 = tt.addptr %150, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %152 = triton_cpu.ptr_to_memref %151 : <f32> -> memref<32xf32> loc(#loc45)
    %153 = vector.extract %52#0[16] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %153, %152[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %154 = arith.addi %14, %c17_i32 : i32 loc(#loc19)
    %155 = arith.muli %arg8, %154 : i32 loc(#loc42)
    %156 = tt.addptr %arg2, %155 : !tt.ptr<f32>, i32 loc(#loc43)
    %157 = tt.addptr %156, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %158 = triton_cpu.ptr_to_memref %157 : <f32> -> memref<32xf32> loc(#loc45)
    %159 = vector.extract %52#0[17] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %159, %158[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %160 = arith.addi %14, %c18_i32 : i32 loc(#loc19)
    %161 = arith.muli %arg8, %160 : i32 loc(#loc42)
    %162 = tt.addptr %arg2, %161 : !tt.ptr<f32>, i32 loc(#loc43)
    %163 = tt.addptr %162, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %164 = triton_cpu.ptr_to_memref %163 : <f32> -> memref<32xf32> loc(#loc45)
    %165 = vector.extract %52#0[18] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %165, %164[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %166 = arith.addi %14, %c19_i32 : i32 loc(#loc19)
    %167 = arith.muli %arg8, %166 : i32 loc(#loc42)
    %168 = tt.addptr %arg2, %167 : !tt.ptr<f32>, i32 loc(#loc43)
    %169 = tt.addptr %168, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %170 = triton_cpu.ptr_to_memref %169 : <f32> -> memref<32xf32> loc(#loc45)
    %171 = vector.extract %52#0[19] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %171, %170[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %172 = arith.addi %14, %c20_i32 : i32 loc(#loc19)
    %173 = arith.muli %arg8, %172 : i32 loc(#loc42)
    %174 = tt.addptr %arg2, %173 : !tt.ptr<f32>, i32 loc(#loc43)
    %175 = tt.addptr %174, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %176 = triton_cpu.ptr_to_memref %175 : <f32> -> memref<32xf32> loc(#loc45)
    %177 = vector.extract %52#0[20] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %177, %176[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %178 = arith.addi %14, %c21_i32 : i32 loc(#loc19)
    %179 = arith.muli %arg8, %178 : i32 loc(#loc42)
    %180 = tt.addptr %arg2, %179 : !tt.ptr<f32>, i32 loc(#loc43)
    %181 = tt.addptr %180, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %182 = triton_cpu.ptr_to_memref %181 : <f32> -> memref<32xf32> loc(#loc45)
    %183 = vector.extract %52#0[21] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %183, %182[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %184 = arith.addi %14, %c22_i32 : i32 loc(#loc19)
    %185 = arith.muli %arg8, %184 : i32 loc(#loc42)
    %186 = tt.addptr %arg2, %185 : !tt.ptr<f32>, i32 loc(#loc43)
    %187 = tt.addptr %186, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %188 = triton_cpu.ptr_to_memref %187 : <f32> -> memref<32xf32> loc(#loc45)
    %189 = vector.extract %52#0[22] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %189, %188[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %190 = arith.addi %14, %c23_i32 : i32 loc(#loc19)
    %191 = arith.muli %arg8, %190 : i32 loc(#loc42)
    %192 = tt.addptr %arg2, %191 : !tt.ptr<f32>, i32 loc(#loc43)
    %193 = tt.addptr %192, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %194 = triton_cpu.ptr_to_memref %193 : <f32> -> memref<32xf32> loc(#loc45)
    %195 = vector.extract %52#0[23] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %195, %194[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %196 = arith.addi %14, %c24_i32 : i32 loc(#loc19)
    %197 = arith.muli %arg8, %196 : i32 loc(#loc42)
    %198 = tt.addptr %arg2, %197 : !tt.ptr<f32>, i32 loc(#loc43)
    %199 = tt.addptr %198, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %200 = triton_cpu.ptr_to_memref %199 : <f32> -> memref<32xf32> loc(#loc45)
    %201 = vector.extract %52#0[24] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %201, %200[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %202 = arith.addi %14, %c25_i32 : i32 loc(#loc19)
    %203 = arith.muli %arg8, %202 : i32 loc(#loc42)
    %204 = tt.addptr %arg2, %203 : !tt.ptr<f32>, i32 loc(#loc43)
    %205 = tt.addptr %204, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %206 = triton_cpu.ptr_to_memref %205 : <f32> -> memref<32xf32> loc(#loc45)
    %207 = vector.extract %52#0[25] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %207, %206[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %208 = arith.addi %14, %c26_i32 : i32 loc(#loc19)
    %209 = arith.muli %arg8, %208 : i32 loc(#loc42)
    %210 = tt.addptr %arg2, %209 : !tt.ptr<f32>, i32 loc(#loc43)
    %211 = tt.addptr %210, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %212 = triton_cpu.ptr_to_memref %211 : <f32> -> memref<32xf32> loc(#loc45)
    %213 = vector.extract %52#0[26] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %213, %212[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %214 = arith.addi %14, %c27_i32 : i32 loc(#loc19)
    %215 = arith.muli %arg8, %214 : i32 loc(#loc42)
    %216 = tt.addptr %arg2, %215 : !tt.ptr<f32>, i32 loc(#loc43)
    %217 = tt.addptr %216, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %218 = triton_cpu.ptr_to_memref %217 : <f32> -> memref<32xf32> loc(#loc45)
    %219 = vector.extract %52#0[27] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %219, %218[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %220 = arith.addi %14, %c28_i32 : i32 loc(#loc19)
    %221 = arith.muli %arg8, %220 : i32 loc(#loc42)
    %222 = tt.addptr %arg2, %221 : !tt.ptr<f32>, i32 loc(#loc43)
    %223 = tt.addptr %222, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %224 = triton_cpu.ptr_to_memref %223 : <f32> -> memref<32xf32> loc(#loc45)
    %225 = vector.extract %52#0[28] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %225, %224[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %226 = arith.addi %14, %c29_i32 : i32 loc(#loc19)
    %227 = arith.muli %arg8, %226 : i32 loc(#loc42)
    %228 = tt.addptr %arg2, %227 : !tt.ptr<f32>, i32 loc(#loc43)
    %229 = tt.addptr %228, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %230 = triton_cpu.ptr_to_memref %229 : <f32> -> memref<32xf32> loc(#loc45)
    %231 = vector.extract %52#0[29] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %231, %230[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %232 = arith.addi %14, %c30_i32 : i32 loc(#loc19)
    %233 = arith.muli %arg8, %232 : i32 loc(#loc42)
    %234 = tt.addptr %arg2, %233 : !tt.ptr<f32>, i32 loc(#loc43)
    %235 = tt.addptr %234, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %236 = triton_cpu.ptr_to_memref %235 : <f32> -> memref<32xf32> loc(#loc45)
    %237 = vector.extract %52#0[30] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %237, %236[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    %238 = arith.addi %14, %c31_i32 : i32 loc(#loc19)
    %239 = arith.muli %arg8, %238 : i32 loc(#loc42)
    %240 = tt.addptr %arg2, %239 : !tt.ptr<f32>, i32 loc(#loc43)
    %241 = tt.addptr %240, %19 : !tt.ptr<f32>, i32 loc(#loc44)
    %242 = triton_cpu.ptr_to_memref %241 : <f32> -> memref<32xf32> loc(#loc45)
    %243 = vector.extract %52#0[31] : vector<32xf32> from vector<32x32xf32> loc(#loc45)
    vector.store %243, %242[%c0] : memref<32xf32>, vector<32xf32> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":223:20)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:51)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":187:24)
#loc5 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":40:22)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":188:27)
#loc7 = loc("/root/triton/triton-cpu/python/triton/language/standard.py":40:28)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":189:27)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":190:38)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":191:22)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":192:29)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":193:35)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":193:48)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":194:33)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":194:27)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":195:19)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":195:40)
#loc18 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:23)
#loc19 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:38)
#loc20 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":204:68)
#loc21 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:23)
#loc22 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:38)
#loc23 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":205:68)
#loc24 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:30)
#loc25 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:41)
#loc26 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:60)
#loc27 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:53)
#loc28 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":207:22)
#loc29 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:29)
#loc30 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:40)
#loc31 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:60)
#loc32 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:52)
#loc33 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":208:22)
#loc34 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":216:33)
#loc35 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:33)
#loc36 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:18)
#loc37 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":224:20)
#loc38 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":216:22)
#loc39 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":226:35)
#loc40 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":228:18)
#loc41 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":229:8)
#loc42 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:33)
#loc43 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:21)
#loc44 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":238:52)
#loc45 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":243:21)
#loc46 = loc("/root/triton/triton-cpu/./python/tutorials/03-matrix-multiplication-cpu.py":243:4)
#loc47 = loc(callsite(#loc5 at #loc6))
#loc48 = loc(callsite(#loc7 at #loc6))
#loc49 = loc(callsite(#loc5 at #loc8))
#loc50 = loc(callsite(#loc7 at #loc8))
#loc51 = loc(callsite(#loc5 at #loc34))
#loc52 = loc(callsite(#loc7 at #loc34))
