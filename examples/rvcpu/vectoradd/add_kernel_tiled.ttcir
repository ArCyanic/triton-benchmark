#loc = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0)
module {
  tt.func public @add_kernel_tiled(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : vector<16xf32> loc(#loc1)
    %c0 = arith.constant 0 : index loc(#loc1)
    %cst_0 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]> : vector<16xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c4096_i32 : i32 loc(#loc3)
    %2 = vector.splat %arg3 : vector<16xi32> loc(#loc4)
    scf.for %arg4 = %c0_i32 to %c256_i32 step %c1_i32  : i32 {
      %3 = arith.muli %arg4, %c16_i32 : i32 loc(#loc6)
      %4 = arith.addi %1, %3 : i32 loc(#loc7)
      %5 = vector.splat %4 : vector<16xi32> loc(#loc8)
      %6 = arith.addi %5, %cst_0 : vector<16xi32> loc(#loc8)
      %7 = arith.cmpi slt, %6, %2 : vector<16xi32> loc(#loc4)
      %8 = tt.addptr %arg0, %4 : !tt.ptr<f32>, i32 loc(#loc9)
      %9 = triton_cpu.ptr_to_memref %8 : <f32> -> memref<16xf32> loc(#loc10)
      %10 = vector.maskedload %9[%c0], %7, %cst : memref<16xf32>, vector<16xi1>, vector<16xf32> into vector<16xf32> loc(#loc10)
      %11 = tt.addptr %arg1, %4 : !tt.ptr<f32>, i32 loc(#loc11)
      %12 = triton_cpu.ptr_to_memref %11 : <f32> -> memref<16xf32> loc(#loc12)
      %13 = vector.maskedload %12[%c0], %7, %cst : memref<16xf32>, vector<16xi1>, vector<16xf32> into vector<16xf32> loc(#loc12)
      %14 = arith.addf %10, %13 : vector<16xf32> loc(#loc13)
      %15 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc14)
      %16 = triton_cpu.ptr_to_memref %15 : <f32> -> memref<16xf32> loc(#loc15)
      vector.maskedstore %16[%c0], %7, %14 : memref<16xf32>, vector<16xi1>, vector<16xf32> loc(#loc15)
    } loc(#loc5)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":70:24)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":71:24)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":74:25)
#loc5 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":72:22)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:36)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:32)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:48)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":75:28)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":75:20)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":76:28)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":76:20)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":77:21)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":78:30)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":78:39)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":72:4)
