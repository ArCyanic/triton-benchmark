#loc = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0)
module {
  tt.func public @add_kernel_tiled(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":62:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c4096_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %3 = tt.splat %arg3 : i32 -> tensor<16xi32> loc(#loc5)
    %4 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>> loc(#loc6)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>> loc(#loc7)
    %6 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>> loc(#loc8)
    scf.for %arg4 = %c0_i32 to %c256_i32 step %c1_i32  : i32 {
      %7 = arith.muli %arg4, %c16_i32 : i32 loc(#loc10)
      %8 = arith.addi %1, %7 : i32 loc(#loc11)
      %9 = tt.splat %8 : i32 -> tensor<16xi32> loc(#loc12)
      %10 = arith.addi %9, %2 : tensor<16xi32> loc(#loc12)
      %11 = arith.cmpi slt, %10, %3 : tensor<16xi32> loc(#loc5)
      %12 = tt.addptr %4, %10 : tensor<16x!tt.ptr<f32>>, tensor<16xi32> loc(#loc6)
      %13 = tt.load %12, %11 : tensor<16x!tt.ptr<f32>> loc(#loc13)
      %14 = tt.addptr %5, %10 : tensor<16x!tt.ptr<f32>>, tensor<16xi32> loc(#loc7)
      %15 = tt.load %14, %11 : tensor<16x!tt.ptr<f32>> loc(#loc14)
      %16 = arith.addf %13, %15 : tensor<16xf32> loc(#loc15)
      %17 = tt.addptr %6, %10 : tensor<16x!tt.ptr<f32>>, tensor<16xi32> loc(#loc8)
      tt.store %17, %16, %11 : tensor<16x!tt.ptr<f32>> loc(#loc16)
    } loc(#loc9)
    tt.return loc(#loc17)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":70:24)
#loc3 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":71:24)
#loc4 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:61)
#loc5 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":74:25)
#loc6 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":75:28)
#loc7 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":76:28)
#loc8 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":78:30)
#loc9 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":72:22)
#loc10 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:36)
#loc11 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:32)
#loc12 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":73:48)
#loc13 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":75:20)
#loc14 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":76:20)
#loc15 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":77:21)
#loc16 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":78:39)
#loc17 = loc("/root/triton/triton-cpu/./python/tutorials/01-vector-add.py":72:4)
